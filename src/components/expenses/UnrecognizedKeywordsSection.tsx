'use client'

import { useState, useEffect } from 'react'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { SearchableSelect } from '@/components/ui/SearchableSelect'
import { useToast } from '@/hooks/useToast'
import { getUnrecognizedKeywords, assignCategoryToKeyword, deleteUnrecognizedKeyword } from '@/lib/actions/keywords'
import type { Category, UnrecognizedKeyword } from '@/types'

interface UnrecognizedKeywordsSectionProps {
  categories: Category[]
  isVisible: boolean
  onToggleVisibility: () => void
}

export function UnrecognizedKeywordsSection({ 
  categories, 
  isVisible, 
  onToggleVisibility 
}: UnrecognizedKeywordsSectionProps) {
  const [keywords, setKeywords] = useState<UnrecognizedKeyword[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [assigningKeywords, setAssigningKeywords] = useState<Set<string>>(new Set())
  const { showToast } = useToast()

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è SearchableSelect
  const categoryOptions = categories.map(category => ({
    value: category.id,
    label: category.name,
    color: category.color || '#6366f1',
    icon: category.icon || 'shopping-bag'
  }))

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  useEffect(() => {
    if (isVisible) {
      loadUnrecognizedKeywords()
    }
  }, [isVisible]) // eslint-disable-line react-hooks/exhaustive-deps

  const loadUnrecognizedKeywords = async () => {
    setIsLoading(true)
    try {
      const result = await getUnrecognizedKeywords()
      if (result.success) {
        setKeywords(result.data || [])
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', 'error')
      }
    } catch (error) {
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ', 'error')
    } finally {
      setIsLoading(false)
    }
  }

  const handleAssignCategory = async (keyword: UnrecognizedKeyword, categoryId: string) => {
    setAssigningKeywords(prev => new Set(prev).add(keyword.id))
    
    try {
      const result = await assignCategoryToKeyword({
        keyword: keyword.keyword,
        category_id: categoryId
      })

      if (result.success) {
        showToast(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${keyword.keyword}" –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, 'success')
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö
        setKeywords(prev => prev.filter(k => k.id !== keyword.id))
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error')
      }
    } catch (error) {
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error')
    } finally {
      setAssigningKeywords(prev => {
        const newSet = new Set(prev)
        newSet.delete(keyword.id)
        return newSet
      })
    }
  }

  const handleDeleteKeyword = async (keyword: UnrecognizedKeyword) => {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${keyword.keyword}"?`)) {
      return
    }

    try {
      const result = await deleteUnrecognizedKeyword(keyword.id)
      if (result.success) {
        showToast('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ', 'success')
        setKeywords(prev => prev.filter(k => k.id !== keyword.id))
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞', 'error')
      }
    } catch (error) {
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', 'error')
    }
  }

  if (keywords.length === 0 && !isLoading) {
    return null // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  }

  return (
    <Card className="mb-6">
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-2">
            <h3 className="text-lg font-semibold text-gray-900">
              üî§ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            </h3>
            <span className="bg-orange-100 text-orange-800 text-xs font-medium px-2 py-1 rounded-full">
              {keywords.length}
            </span>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={onToggleVisibility}
          >
            {isVisible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
          </Button>
        </div>

        {isVisible && (
          <>
            {isLoading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                <p className="text-sm text-gray-600 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
              </div>
            ) : (
              <>
                <p className="text-sm text-gray-600 mb-4">
                  –ù–∞–∑–Ω–∞—á—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {keywords.map((keyword) => (
                    <div
                      key={keyword.id}
                      className="border border-gray-200 rounded-lg p-4 bg-gray-50"
                    >
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <span className="font-medium text-gray-900">
                            {keyword.keyword}
                          </span>
                          <div className="text-xs text-gray-500 mt-1">
                            –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è: {keyword.frequency} —Ä–∞–∑
                          </div>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDeleteKeyword(keyword)}
                          className="text-gray-400 hover:text-red-600 p-1"
                          title="–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </Button>
                      </div>
                      
                      <div className="space-y-2">
                        <SearchableSelect
                          options={categoryOptions}
                          value=""
                          onChange={(categoryId) => handleAssignCategory(keyword, categoryId)}
                          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é..."
                          disabled={assigningKeywords.has(keyword.id)}
                          size="sm"
                        />
                        
                        {assigningKeywords.has(keyword.id) && (
                          <div className="text-xs text-blue-600 text-center">
                            –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </>
            )}
          </>
        )}
      </div>
    </Card>
  )
}