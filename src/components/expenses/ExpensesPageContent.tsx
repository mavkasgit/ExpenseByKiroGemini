'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/Button'
import { Card } from '@/components/ui/Card'
import { Modal } from '@/components/ui/Modal'
import { UnrecognizedKeywordsSection } from './UnrecognizedKeywordsSection'
import { ExpenseEditModal } from './ExpenseEditModal'
import { InlineNotesEditor } from './InlineNotesEditor'
import { formatAmount } from '@/lib/utils/formatNumber'
import { formatDateLocaleRu } from '@/lib/utils/dateUtils'
import { deleteAllExpenses } from '@/lib/actions/expenses'
import { useToast } from '@/hooks/useToast'
import type { Category, ExpenseWithCategory } from '@/types'
import Link from 'next/link'

interface ExpensesPageContentProps {
  initialExpenses: ExpenseWithCategory[]
  categories: Category[]
  error?: string
}

export function ExpensesPageContent({ 
  initialExpenses, 
  categories, 
  error 
}: ExpensesPageContentProps) {
  const [showUnrecognizedKeywords, setShowUnrecognizedKeywords] = useState(true)
  const [hideUncategorized, setHideUncategorized] = useState(false)
  const [editingExpense, setEditingExpense] = useState<ExpenseWithCategory | null>(null)
  const [expenses, setExpenses] = useState(initialExpenses)
  const [showDeleteAllModal, setShowDeleteAllModal] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const { showToast } = useToast()

  if (error) {
    return (
      <div className="text-center">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
        <p className="text-gray-600 mb-6">{error}</p>
        <Link href="/dashboard">
          <Button>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Button>
        </Link>
      </div>
    )
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const filteredExpenses = hideUncategorized 
    ? expenses.filter(expense => expense.status !== 'uncategorized')
    : expenses

  const uncategorizedCount = expenses.filter(expense => expense.status === 'uncategorized').length

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
  const handleExpenseUpdate = (updatedExpense: ExpenseWithCategory) => {
    setExpenses(prev => prev.map(expense => 
      expense.id === updatedExpense.id ? updatedExpense : expense
    ))
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
  const handleDeleteAll = async () => {
    setIsDeleting(true)
    try {
      const result = await deleteAllExpenses()
      
      if (result.error) {
        showToast(result.error, 'error')
      } else {
        setExpenses([])
        showToast('–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã', 'success')
        setShowDeleteAllModal(false)
      }
    } catch (error) {
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', 'error')
    } finally {
      setIsDeleting(false)
    }
  }

  if (expenses.length === 0) {
    return (
      <Card className="p-8 text-center">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">
          –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
        </h2>
        <p className="text-gray-600 mb-6">
          –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã, –¥–æ–±–∞–≤–∏–≤ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å.
        </p>
        <div className="space-y-3">
          <Link href="/expenses/add">
            <Button className="w-full">
              –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Ö–æ–¥
            </Button>
          </Link>
          <Link href="/expenses/bulk">
            <Button variant="outline" className="w-full">
              –ú–∞—Å—Å–æ–≤—ã–π –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤
            </Button>
          </Link>

          {categories.length === 0 && (
            <Link href="/categories">
              <Button variant="outline" className="w-full">
                –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </Button>
            </Link>
          )}
        </div>
      </Card>
    )
  }

  return (
    <>
      {/* –°–µ–∫—Ü–∏—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ */}
      <UnrecognizedKeywordsSection
        categories={categories}
        isVisible={showUnrecognizedKeywords}
        onToggleVisibility={() => setShowUnrecognizedKeywords(!showUnrecognizedKeywords)}
      />

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <h2 className="text-lg font-semibold text-gray-900">
            –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã ({filteredExpenses.length})
          </h2>
          {uncategorizedCount > 0 && (
            <div className="flex items-center space-x-2">
              <label className="flex items-center space-x-2 text-sm">
                <input
                  type="checkbox"
                  checked={hideUncategorized}
                  onChange={(e) => setHideUncategorized(e.target.checked)}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-gray-700">
                  –°–∫—Ä—ã—Ç—å –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ ({uncategorizedCount})
                </span>
              </label>
            </div>
          )}
        </div>
        
        <div className="flex space-x-2">
          <Link href="/expenses/add">
            <Button>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</Button>
          </Link>
          <Link href="/expenses/bulk">
            <Button variant="outline">–ú–∞—Å—Å–æ–≤—ã–π –≤–≤–æ–¥</Button>
          </Link>

          {expenses.length > 0 && (
            <Button 
              variant="danger" 
              onClick={() => setShowDeleteAllModal(true)}
              className="ml-2"
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ
            </Button>
          )}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <div className="space-y-2">
        {filteredExpenses.map((expense) => (
          <Card key={expense.id} className="p-3">
            <div className="flex items-center gap-3 min-w-0">
              {/* –°—É–º–º–∞ */}
              <div className="text-lg font-semibold text-gray-900 flex-shrink-0">
                {formatAmount(expense.amount)}
              </div>
              
              {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
              <div className="flex-shrink-0">
                {expense.category ? (
                  <div 
                    className="px-2 py-1 rounded-full text-xs font-medium text-white"
                    style={{ backgroundColor: expense.category.color || '#6366f1' }}
                  >
                    {expense.category.name}
                  </div>
                ) : (
                  <div className="px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                    –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π
                  </div>
                )}
              </div>

              {/* –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ */}
              <div className="flex-shrink-0">
                {expense.matched_keywords && expense.matched_keywords.length > 0 ? (
                  <div className="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">
                    {expense.matched_keywords.join(', ')}
                  </div>
                ) : expense.auto_categorized ? (
                  <div className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded flex items-center gap-1">
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                    </svg>
                    –ê–≤—Ç–æ
                  </div>
                ) : null}
              </div>

              {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ */}
              <InlineNotesEditor 
                expense={expense}
                onUpdate={handleExpenseUpdate}
              />

              {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
              <div className="text-sm text-gray-500 flex-shrink-0">
                {formatDateLocaleRu(expense.expense_date)}
                {expense.expense_time && (
                  <span className="ml-1 text-xs text-gray-400">
                    {expense.expense_time.slice(0, 5)}
                  </span>
                )}
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
              <div className="flex-shrink-0">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setEditingExpense(expense)}
                  className="text-xs px-2 py-1"
                >
                  ‚öôÔ∏è
                </Button>
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å */}
            {expense.description && (
              <div className="text-sm text-gray-600 mt-2 pl-2 border-l-2 border-gray-200">
                {expense.description}
              </div>
            )}
          </Card>
        ))}
        
        {filteredExpenses.length === 0 && hideUncategorized && (
          <Card className="p-8 text-center">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–∫—Ä—ã—Ç—ã
            </h3>
            <p className="text-gray-600 mb-4">
              –í—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —è–≤–ª—è—é—Ç—Å—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏. –°–Ω–∏–º–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤—ã—à–µ.
            </p>
            <Button 
              variant="outline" 
              onClick={() => setHideUncategorized(false)}
            >
              –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
            </Button>
          </Card>
        )}
        
        {filteredExpenses.length >= 50 && (
          <div className="text-center pt-4">
            <Button variant="outline">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
            </Button>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ */}
      {editingExpense && (
        <ExpenseEditModal
          expense={editingExpense}
          categories={categories}
          isOpen={!!editingExpense}
          onClose={() => setEditingExpense(null)}
          onSuccess={handleExpenseUpdate}
        />
      )}

      {/* –ú–æ–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <Modal
        isOpen={showDeleteAllModal}
        onClose={() => setShowDeleteAllModal(false)}
        title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã"
      >
        <div className="space-y-4">
          <p className="text-gray-700">
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
          </p>
          <p className="text-sm text-gray-600">
            –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: <strong>{expenses.length}</strong>
          </p>
          
          <div className="flex space-x-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setShowDeleteAllModal(false)}
              disabled={isDeleting}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              variant="danger"
              onClick={handleDeleteAll}
              disabled={isDeleting}
              className={isDeleting ? 'animate-pulse' : ''}
            >
              {isDeleting ? (
                <span className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  –£–¥–∞–ª–µ–Ω–∏–µ...
                </span>
              ) : (
                'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ'
              )}
            </Button>
          </div>
        </div>
      </Modal>
    </>
  )
}