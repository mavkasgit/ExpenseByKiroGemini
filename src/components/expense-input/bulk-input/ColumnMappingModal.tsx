'use client'

import { useState, useCallback, useMemo, useEffect } from 'react'
import { Modal } from '@/components/ui/Modal'
import { Button } from '@/components/ui/Button'
import type { ColumnMapping } from '@/types'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
function Tooltip({ children, content }: { children: React.ReactNode; content: string }) {
  return (
    <div className="relative group">
      {children}
      {/* Tooltip —Å–ø—Ä–∞–≤–∞ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ */}
      <div className="absolute left-full top-1/2 transform -translate-y-1/2 ml-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-[10000] break-words shadow-lg" style={{maxWidth: '400px', width: 'max-content', minWidth: '200px'}}>
        {content}
        {/* –°—Ç—Ä–µ–ª–∫–∞ —Å–ª–µ–≤–∞ */}
        <div className="absolute right-full top-1/2 transform -translate-y-1/2 border-4 border-transparent border-r-gray-900"></div>
      </div>
    </div>
  )
}

// ColumnMapping –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ @/types

interface FieldAssignment {
  field: 'amount' | 'description' | 'expense_date' | 'notes'
  assignedColumn: number | null
  required: boolean
}

interface ColumnMappingModalProps {
  isOpen: boolean
  onClose: () => void
  onApply: (mapping: ColumnMapping[]) => void
  onApplyAndSave?: (mapping: ColumnMapping[]) => void // –ù–æ–≤—ã–π –ø—Ä–æ–ø –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  sampleData: string[][] // –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  savedMapping?: ColumnMapping[] | null // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  isEditingMode?: boolean // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
}

const FIELD_ICONS = {
  amount: 'üí∞',
  description: 'üìù',
  expense_date: 'üìÖ',
  notes: 'üìã',
  skip: ''
}

const FIELD_LABELS = {
  amount: '–°—É–º–º–∞',
  description: '–û–ø–∏—Å–∞–Ω–∏–µ',
  expense_date: '–î–∞—Ç–∞',
  notes: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
  skip: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'
}

const FIELD_COLORS = {
  amount: 'bg-green-100 border-green-300 text-green-800',
  description: 'bg-blue-100 border-blue-300 text-blue-800',
  expense_date: 'bg-purple-100 border-purple-300 text-purple-800',
  notes: 'bg-yellow-100 border-yellow-300 text-yellow-800',
  skip: 'bg-gray-100 border-gray-300 text-gray-600'
}

export function ColumnMappingModal({ 
  isOpen, 
  onClose, 
  onApply, 
  onApplyAndSave,
  sampleData,
  savedMapping,
  isEditingMode = false
}: ColumnMappingModalProps) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã)
  const [columnOrder, setColumnOrder] = useState<number[]>([])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
  const [fieldAssignments, setFieldAssignments] = useState<FieldAssignment[]>([])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ sampleData
  useEffect(() => {
    if (sampleData.length === 0) {
      setColumnOrder([])
      setFieldAssignments([])
      return
    }

    const columnCount = Math.max(...sampleData.map(row => row.length))
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
    setColumnOrder(Array.from({ length: columnCount }, (_, index) => index))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω–∞
    if (savedMapping && savedMapping.length === columnCount) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ö–µ–º—É
      const newFieldAssignments: FieldAssignment[] = [
        { field: 'amount' as const, assignedColumn: null, required: true },
        { field: 'description' as const, assignedColumn: null, required: true },
        { field: 'expense_date' as const, assignedColumn: null, required: false },
        { field: 'notes' as const, assignedColumn: null, required: false }
      ]
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
      savedMapping.forEach((column, index) => {
        if (column.targetField !== 'skip') {
          const targetField = column.targetField as 'amount' | 'description' | 'expense_date' | 'notes'
          const fieldAssignment = newFieldAssignments.find(f => f.field === targetField)
          if (fieldAssignment) {
            fieldAssignment.assignedColumn = index as number
          }
        }
      })
      
      setFieldAssignments(newFieldAssignments)
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π - –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ
      setFieldAssignments([
        { field: 'amount', assignedColumn: null, required: true },
        { field: 'description', assignedColumn: null, required: true },
        { field: 'expense_date', assignedColumn: null, required: false },
        { field: 'notes', assignedColumn: null, required: false }
      ])
    }
  }, [sampleData, savedMapping])

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const assignFieldToColumn = useCallback((field: 'amount' | 'description' | 'expense_date' | 'notes', columnIndex: number | null) => {
    setFieldAssignments(prev => prev.map(assignment => {
      // –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü, —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      if (assignment.assignedColumn === columnIndex && assignment.field !== field) {
        return { ...assignment, assignedColumn: null }
      }
      // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
      if (assignment.field === field) {
        return { ...assignment, assignedColumn: columnIndex }
      }
      return assignment
    }))
  }, [])

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞
  const getAssignedField = useCallback((columnIndex: number) => {
    const assignment = fieldAssignments.find(f => f.assignedColumn === columnIndex)
    return assignment?.field || 'skip'
  }, [fieldAssignments])

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const createMapping = useCallback(() => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const mapping: ColumnMapping[] = columnOrder.map((originalIndex, newIndex) => ({
      sourceIndex: newIndex,
      targetField: 'skip' as const,
      enabled: true, // –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      preview: sampleData[0]?.[originalIndex] || ''
    }))

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—è
    fieldAssignments.forEach(assignment => {
      if (assignment.assignedColumn !== null) {
        const orderIndex = columnOrder.indexOf(assignment.assignedColumn)
        if (orderIndex !== -1) {
          mapping[orderIndex].targetField = assignment.field
          mapping[orderIndex].enabled = true
        }
      }
    })

    // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—é
    mapping.forEach(item => {
      if (item.targetField === 'skip') {
        item.enabled = false
      }
    })

    return mapping
  }, [columnOrder, fieldAssignments, sampleData])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleApply = useCallback(() => {
    // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isEditingMode) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
      const amountField = fieldAssignments.find(f => f.field === 'amount')
      const descriptionField = fieldAssignments.find(f => f.field === 'description')
      
      if (!amountField?.assignedColumn || !descriptionField?.assignedColumn) {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        return
      }
    }

    const mapping = createMapping()
    onApply(mapping)
    onClose()
  }, [createMapping, onApply, onClose, isEditingMode, fieldAssignments])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleApplyAndSave = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const amountField = fieldAssignments.find(f => f.field === 'amount')
    const descriptionField = fieldAssignments.find(f => f.field === 'description')
    
    if (!amountField?.assignedColumn || !descriptionField?.assignedColumn) {
      return
    }

    const mapping = createMapping()
    if (onApplyAndSave) {
      onApplyAndSave(mapping)
    }
    onClose()
  }, [createMapping, onApplyAndSave, onClose, fieldAssignments])

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const previewData = useMemo(() => {
    if (sampleData.length === 0) return []

    const amountField = fieldAssignments.find(f => f.field === 'amount')
    const descriptionField = fieldAssignments.find(f => f.field === 'description')
    const dateField = fieldAssignments.find(f => f.field === 'expense_date')
    const notesField = fieldAssignments.find(f => f.field === 'notes')

    // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (!isEditingMode && (amountField?.assignedColumn === null || amountField?.assignedColumn === undefined ||
        descriptionField?.assignedColumn === null || descriptionField?.assignedColumn === undefined)) {
      return []
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ columnOrder
    const reorderedData = sampleData.map(row => {
      const reorderedRow: string[] = []
      columnOrder.forEach((originalIndex, newIndex) => {
        reorderedRow[newIndex] = row[originalIndex] || ''
      })
      return reorderedRow
    })

    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    return reorderedData.map(row => ({
      amount: amountField && amountField.assignedColumn !== null && amountField.assignedColumn !== undefined ? 
        row[columnOrder.indexOf(amountField.assignedColumn)] || '' : '',
      description: descriptionField && descriptionField.assignedColumn !== null && descriptionField.assignedColumn !== undefined ? 
        row[columnOrder.indexOf(descriptionField.assignedColumn)] || '' : '',
      expense_date: dateField && dateField.assignedColumn !== null && dateField.assignedColumn !== undefined ? 
        row[columnOrder.indexOf(dateField.assignedColumn)] || '' : '',
      notes: notesField && notesField.assignedColumn !== null && notesField.assignedColumn !== undefined ? 
        row[columnOrder.indexOf(notesField.assignedColumn)] || '' : ''
    }))
  }, [sampleData, fieldAssignments, columnOrder, isEditingMode])

  // –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const handleReset = useCallback(() => {
    if (sampleData.length === 0) return
    
    const columnCount = Math.max(...sampleData.map(row => row.length))
    
    setColumnOrder(Array.from({ length: columnCount }, (_, index) => index))
    setFieldAssignments([
      { field: 'amount', assignedColumn: null, required: true },
      { field: 'description', assignedColumn: null, required: true },
      { field: 'expense_date', assignedColumn: null, required: false },
      { field: 'notes', assignedColumn: null, required: false }
    ])
  }, [sampleData])

  if (sampleData.length === 0) {
    return (
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤"
        size="lg"
      >
        <div className="text-center py-8">
          <div className="text-gray-500">
            <p className="text-lg mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
            <p className="text-sm">–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</p>
          </div>
        </div>
      </Modal>
    )
  }

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={
        isEditingMode 
          ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã —Å—Ç–æ–ª–±—Ü–æ–≤" 
          : savedMapping && savedMapping.length === columnOrder.length 
            ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞)" 
            : "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤"
      }
      size="lg"
    >
      <div className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {isEditingMode && (
          <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
              <span className="text-sm text-blue-800 font-medium">
                –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
              </span>
            </div>
            <p className="text-xs text-blue-700 mt-1">
              –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±—É–¥—É—â–∏–º –º–∞—Å—Å–æ–≤—ã–º –≤–≤–æ–¥–∞–º
            </p>
          </div>
        )}

        {/* –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ */}
        <div className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <h3 className="font-medium text-gray-900">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h3>
            <Tooltip content="–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞ —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–º—É –ø–æ–ª–µ">
              <div className="w-4 h-4 bg-gray-400 text-white rounded-full flex items-center justify-center text-xs cursor-help">
                ?
              </div>
            </Tooltip>
          </div>
          
          <div className="bg-white border rounded-lg overflow-hidden mb-4">
            <div className="overflow-x-auto">
              <table className="text-sm" style={{width: 'auto', minWidth: '100%'}}>
                <thead className="bg-gray-50 border-b">
                  <tr>
                    {columnOrder.map((originalIndex, displayIndex) => {
                      const assignedField = getAssignedField(originalIndex)
                      return (
                        <th key={originalIndex} className="text-center whitespace-nowrap p-1">
                          <select
                            value={assignedField}
                            onChange={(e) => {
                              const newField = e.target.value as 'amount' | 'description' | 'expense_date' | 'notes' | 'skip'
                              if (newField === 'skip') {
                                // –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                                setFieldAssignments(prev => prev.map(assignment => 
                                  assignment.assignedColumn === originalIndex 
                                    ? { ...assignment, assignedColumn: null }
                                    : assignment
                                ))
                              } else {
                                // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª–µ
                                assignFieldToColumn(newField, originalIndex)
                              }
                            }}
                            className={`px-3 py-2 text-sm font-medium border-0 cursor-pointer focus:ring-2 focus:ring-blue-500 rounded ${FIELD_COLORS[assignedField]} whitespace-nowrap text-center min-w-fit`}
                            style={{
                              appearance: 'none',
                              backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                              backgroundPosition: 'right 0.5rem center',
                              backgroundRepeat: 'no-repeat',
                              backgroundSize: '1rem 1rem',
                              paddingRight: '2.5rem'
                            }}
                          >
                            <option value="skip">{String.fromCharCode(65 + displayIndex)}</option>
                            <option value="amount">üí∞ –°—É–º–º–∞</option>
                            <option value="description">üìù –û–ø–∏—Å–∞–Ω–∏–µ</option>
                            <option value="expense_date">üìÖ –î–∞—Ç–∞</option>
                            <option value="notes">üìã –ü—Ä–∏–º–µ—á–∞–Ω–∏—è</option>
                          </select>
                        </th>
                      )
                    })}
                  </tr>
                </thead>
                <tbody>
                  {sampleData.slice(0, 5).map((row, rowIndex) => (
                    <tr key={rowIndex} className="border-b hover:bg-gray-50">
                      {columnOrder.map((originalIndex, displayIndex) => (
                        <td key={originalIndex} className="px-4 py-3 text-gray-900 whitespace-nowrap">
                          {row[originalIndex] || '‚Äî'}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {sampleData.length > 5 && (
              <div className="px-4 py-2 bg-gray-50 text-sm text-gray-600 text-center">
                ... –∏ –µ—â–µ {sampleData.length - 5} –∑–∞–ø–∏—Å–µ–π
              </div>
            )}
          </div>
        </div>

        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        <div className="mb-6">
          <div className="flex items-center gap-2 mb-4">
            <h3 className="font-medium text-gray-900">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</h3>
            <Tooltip content="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏">
              <div className="w-4 h-4 bg-gray-400 text-white rounded-full flex items-center justify-center text-xs cursor-help">
                ?
              </div>
            </Tooltip>
          </div>
          
          {previewData.length > 0 ? (
            <div className="bg-white border rounded-lg overflow-hidden">
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üí∞ –°—É–º–º–∞</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìù –û–ø–∏—Å–∞–Ω–∏–µ</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìÖ –î–∞—Ç–∞</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìã –ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {previewData.slice(0, 5).map((row, rowIndex) => (
                      <tr key={rowIndex} className="border-b hover:bg-gray-50">
                        <td className="px-4 py-3 font-medium text-green-700 whitespace-nowrap">
                          {row.amount || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-blue-700 whitespace-nowrap">
                          {row.description || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-purple-700 whitespace-nowrap">
                          {row.expense_date || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-yellow-700 whitespace-nowrap">
                          {row.notes || '‚Äî'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              {previewData.length > 5 && (
                <div className="px-4 py-2 bg-gray-50 text-sm text-gray-600 text-center">
                  ... –∏ –µ—â–µ {previewData.length - 5} –∑–∞–ø–∏—Å–µ–π
                </div>
              )}
            </div>
          ) : (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <div className="text-yellow-600">‚ö†Ô∏è</div>
                <div className="text-sm text-yellow-800">
                  –ù–∞–∑–Ω–∞—á—å—Ç–µ —Ö–æ—Ç—è –±—ã –ø–æ–ª—è &quot;–°—É–º–º–∞&quot; –∏ &quot;–û–ø–∏—Å–∞–Ω–∏–µ&quot; –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-between items-center pt-6 border-t">
          <div className="flex space-x-3">
            <Tooltip content="–í–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é">
              <Button
                variant="outline"
                onClick={handleReset}
                className="text-gray-600"
              >
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </Tooltip>
          </div>
          
          <div className="flex space-x-3">
            <Button
              variant="outline"
              onClick={onClose}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            
            {isEditingMode ? (
              <Tooltip content="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤">
                <Button
                  variant="primary"
                  onClick={handleApply}
                >
                  ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
              </Tooltip>
            ) : (
              <>
                <Tooltip content="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ">
                  <Button
                    variant="outline"
                    onClick={handleApply}
                    disabled={previewData.length === 0}
                  >
                    üìù –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </Tooltip>
                
                {onApplyAndSave && (
                  <Tooltip content="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã">
                    <Button
                      variant="primary"
                      onClick={handleApplyAndSave}
                      disabled={previewData.length === 0}
                    >
                      üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                  </Tooltip>
                )}
              </>
            )}
          </div>
        </div>
      </div>
    </Modal>
  )
}