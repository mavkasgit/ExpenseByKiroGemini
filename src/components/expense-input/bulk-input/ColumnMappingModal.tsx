'use client'

import { useState, useCallback, useMemo, useEffect, useRef, useLayoutEffect } from 'react'
import { createPortal } from 'react-dom'
import { Modal } from '@/components/ui/Modal'
import { Button } from '@/components/ui/Button'
import type { ColumnMapping, ColumnMappingField } from '@/types'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
function Tooltip({ children, content }: { children: React.ReactNode; content: string }) {
  return (
    <div className="relative group">
      {children}
      {/* Tooltip —Å–ø—Ä–∞–≤–∞ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ */}
      <div className="absolute left-full top-1/2 transform -translate-y-1/2 ml-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-[10000] break-words shadow-lg" style={{maxWidth: '400px', width: 'max-content', minWidth: '200px'}}>
        {content}
        {/* –°—Ç—Ä–µ–ª–∫–∞ —Å–ª–µ–≤–∞ */}
        <div className="absolute right-full top-1/2 transform -translate-y-1/2 border-4 border-transparent border-r-gray-900"></div>
      </div>
    </div>
  )
}

// ColumnMapping –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ @/types

interface FieldAssignment {
  field: ColumnMappingField
  assignedColumn: number | null
  required: boolean
}

interface ColumnMappingModalProps {
  isOpen: boolean
  onClose: () => void
  onApply: (mapping: ColumnMapping[]) => void
  onApplyAndSave?: (mapping: ColumnMapping[]) => void // –ù–æ–≤—ã–π –ø—Ä–æ–ø –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  sampleData: string[][] // –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  savedMapping?: ColumnMapping[] | null // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  isEditingMode?: boolean // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
  tableDescription?: string | null
  onReplaceTable?: () => void
}

const FIELD_ICONS: Record<ColumnMappingField, string> = {
  amount: 'üí∞',
  description: 'üìù',
  city: 'üìç',
  expense_date: 'üìÖ',
  expense_time: '‚è∞',
  notes: 'üìã'
}

const FIELD_LABELS: Record<ColumnMappingField, string> = {
  amount: '–°—É–º–º–∞',
  description: '–û–ø–∏—Å–∞–Ω–∏–µ',
  city: '–ì–æ—Ä–æ–¥',
  expense_date: '–î–∞—Ç–∞',
  expense_time: '–í—Ä–µ–º—è',
  notes: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
}

const FIELD_COLORS: Record<ColumnMappingField, string> = {
  amount: 'bg-green-100 border-green-300 text-green-800',
  description: 'bg-blue-100 border-blue-300 text-blue-800',
  city: 'bg-indigo-100 border-indigo-300 text-indigo-800',
  expense_date: 'bg-purple-100 border-purple-300 text-purple-800',
  expense_time: 'bg-teal-100 border-teal-300 text-teal-800',
  notes: 'bg-yellow-100 border-yellow-300 text-yellow-800'
}

const COLUMN_FIELD_OPTIONS: Array<{ field: ColumnMappingField; label: string; icon: string }> = (
  Object.keys(FIELD_LABELS) as ColumnMappingField[]
).map(field => ({
  field,
  label: FIELD_LABELS[field],
  icon: FIELD_ICONS[field]
}))

const COLUMN_FIELD_SET = new Set<ColumnMappingField>(COLUMN_FIELD_OPTIONS.map(option => option.field))

function isColumnMappingField(value: unknown): value is ColumnMappingField {
  return typeof value === 'string' && COLUMN_FIELD_SET.has(value as ColumnMappingField)
}

function createDefaultFieldAssignments(): FieldAssignment[] {
  return [
    { field: 'amount', assignedColumn: null, required: true },
    { field: 'description', assignedColumn: null, required: true },
    { field: 'city', assignedColumn: null, required: false },
    { field: 'expense_date', assignedColumn: null, required: false },
    { field: 'expense_time', assignedColumn: null, required: false },
    { field: 'notes', assignedColumn: null, required: false }
  ]
}

export function ColumnMappingModal({ 
  isOpen, 
  onClose, 
  onApply, 
  onApplyAndSave,
  sampleData,
  savedMapping,
  isEditingMode = false,
  tableDescription,
  onReplaceTable
}: ColumnMappingModalProps) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã)
  const [columnOrder, setColumnOrder] = useState<number[]>([])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
  const [fieldAssignments, setFieldAssignments] = useState<FieldAssignment[]>([])
  const [openColumnPicker, setOpenColumnPicker] = useState<number | null>(null)
  const [hiddenColumns, setHiddenColumns] = useState<Set<number>>(() => new Set())
  const [isHiddernColumnsVisible, setIsHiddernColumnsVisible] = useState(true)
  const [pickerPosition, setPickerPosition] = useState<{
    top: number
    left: number
    width: number
  } | null>(null)
  const columnPickerRefs = useRef<Record<number, HTMLDivElement | null>>({})
  const dropdownContainerRef = useRef<HTMLDivElement | null>(null)

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ sampleData
  useEffect(() => {
    if (sampleData.length === 0) {
      setColumnOrder([])
      setFieldAssignments([])
      setHiddenColumns(new Set())
      return
    }

    const columnCount = Math.max(...sampleData.map(row => row.length))

    const defaultOrder = Array.from({ length: columnCount }, (_, index) => index)
    setColumnOrder(defaultOrder)

    const baseAssignments = createDefaultFieldAssignments()
    const nextHiddenColumns = new Set<number>()

    if (savedMapping && savedMapping.length === columnCount) {
      savedMapping.forEach((column, index) => {
        const originalIndex = defaultOrder[index]
        if (column?.hidden) {
          nextHiddenColumns.add(originalIndex)
          return
        }

        const targets = Array.isArray(column.targetFields)
          ? column.targetFields.filter(isColumnMappingField)
          : []

        targets.forEach(targetField => {
          const assignment = baseAssignments.find(item => item.field === targetField)
          if (assignment) {
            assignment.assignedColumn = originalIndex
          }
        })
      })
    }

    setFieldAssignments(baseAssignments)
    setHiddenColumns(nextHiddenColumns)
  }, [sampleData, savedMapping])

  useEffect(() => {
    if (!isOpen) {
      setOpenColumnPicker(null)
    }
  }, [isOpen])

  useEffect(() => {
    setOpenColumnPicker(null)
  }, [columnOrder])

  useEffect(() => {
    if (openColumnPicker !== null && hiddenColumns.has(openColumnPicker)) {
      setOpenColumnPicker(null)
    }
  }, [hiddenColumns, openColumnPicker])

  const updatePickerPosition = useCallback(() => {
    if (openColumnPicker === null) {
      setPickerPosition(null)
      return
    }

    const anchor = columnPickerRefs.current[openColumnPicker]
    if (!anchor) {
      setPickerPosition(null)
      return
    }

    const rect = anchor.getBoundingClientRect()
    const viewportWidth = typeof window !== 'undefined'
      ? window.innerWidth || document.documentElement.clientWidth || rect.width
      : rect.width
    const dropdownWidth = Math.max(rect.width, 240)
    const maxLeft = Math.max(viewportWidth - dropdownWidth - 8, 8)
    const left = Math.min(Math.max(rect.left, 8), maxLeft)

    setPickerPosition({
      top: Math.max(rect.bottom + 4, 8),
      left,
      width: dropdownWidth
    })
  }, [openColumnPicker])

  useLayoutEffect(() => {
    if (openColumnPicker === null) {
      setPickerPosition(null)
      return
    }

    updatePickerPosition()

    const handleScroll = () => updatePickerPosition()
    window.addEventListener('scroll', handleScroll, true)
    window.addEventListener('resize', handleScroll)

    return () => {
      window.removeEventListener('scroll', handleScroll, true)
      window.removeEventListener('resize', handleScroll)
    }
  }, [openColumnPicker, updatePickerPosition])

  useEffect(() => {
    if (openColumnPicker === null) {
      return
    }

    const handleClickOutside = (event: MouseEvent) => {
      const container = columnPickerRefs.current[openColumnPicker]
      const dropdown = dropdownContainerRef.current
      const target = event.target as Node
      if (container && container.contains(target)) {
        return
      }
      if (dropdown && dropdown.contains(target)) {
        return
      }
      if (container && !container.contains(target)) {
        setOpenColumnPicker(null)
      }
    }

    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setOpenColumnPicker(null)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    document.addEventListener('keydown', handleEscape)

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
      document.removeEventListener('keydown', handleEscape)
    }
  }, [openColumnPicker])

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const toggleFieldForColumn = useCallback((field: ColumnMappingField, columnIndex: number) => {
    setFieldAssignments(prev =>
      prev.map(assignment => {
        if (assignment.field !== field) {
          return assignment
        }

        if (assignment.assignedColumn === columnIndex) {
          return { ...assignment, assignedColumn: null }
        }

        return { ...assignment, assignedColumn: columnIndex }
      })
    )
  }, [])

  const toggleColumnHidden = useCallback((columnIndex: number) => {
    setHiddenColumns(prev => {
      const next = new Set(prev)
      if (next.has(columnIndex)) {
        next.delete(columnIndex)
      } else {
        next.add(columnIndex)
      }
      return next
    })

    setFieldAssignments(prev =>
      prev.map(assignment =>
        assignment.assignedColumn === columnIndex
          ? { ...assignment, assignedColumn: null }
          : assignment
      )
    )

    setOpenColumnPicker(null)
  }, [])

  const getAssignedFields = useCallback(
    (columnIndex: number): ColumnMappingField[] =>
      fieldAssignments.filter(assignment => assignment.assignedColumn === columnIndex).map(assignment => assignment.field),
    [fieldAssignments]
  )

  const visibleColumnOrder = useMemo(
    () => columnOrder.filter(index => !hiddenColumns.has(index)),
    [columnOrder, hiddenColumns]
  )

  const hiddenColumnOrder = useMemo(
    () => columnOrder.filter(index => hiddenColumns.has(index)),
    [columnOrder, hiddenColumns]
  )

  const getColumnDisplayLabel = useCallback(
    (originalIndex: number) => {
      const displayIndex = columnOrder.indexOf(originalIndex)
      if (displayIndex === -1) {
        return `–°—Ç–æ–ª–±–µ—Ü ${originalIndex + 1}`
      }

      if (displayIndex >= 0 && displayIndex < 26) {
        return `–°—Ç–æ–ª–±–µ—Ü ${String.fromCharCode(65 + displayIndex)}`
      }

      return `–°—Ç–æ–ª–±–µ—Ü ${displayIndex + 1}`
    },
    [columnOrder]
  )

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const createMapping = useCallback(() => {
    const mapping: ColumnMapping[] = columnOrder.map((originalIndex, newIndex) => ({
      sourceIndex: newIndex,
      targetFields: [],
      enabled: false,
      preview: sampleData[0]?.[originalIndex] || '',
      hidden: hiddenColumns.has(originalIndex)
    }))

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—è
    fieldAssignments.forEach(assignment => {
      if (assignment.assignedColumn !== null && !hiddenColumns.has(assignment.assignedColumn)) {
        const orderIndex = columnOrder.indexOf(assignment.assignedColumn)
        if (orderIndex !== -1) {
          const targets = mapping[orderIndex].targetFields
          if (!targets.includes(assignment.field)) {
            targets.push(assignment.field)
          }
          mapping[orderIndex].enabled = true
        }
      }
    })

    return mapping
  }, [columnOrder, fieldAssignments, sampleData, hiddenColumns])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleApply = useCallback(() => {
    // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isEditingMode) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
      const amountField = fieldAssignments.find(f => f.field === 'amount')
      const descriptionField = fieldAssignments.find(f => f.field === 'description')
      
      if (!amountField?.assignedColumn || !descriptionField?.assignedColumn) {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        return
      }
    }

    const mapping = createMapping()
    onApply(mapping)
    onClose()
  }, [createMapping, onApply, onClose, isEditingMode, fieldAssignments])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleApplyAndSave = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const amountField = fieldAssignments.find(f => f.field === 'amount')
    const descriptionField = fieldAssignments.find(f => f.field === 'description')

    if (!amountField?.assignedColumn || !descriptionField?.assignedColumn) {
      return
    }

    if (onApplyAndSave) {
      const confirmed = window.confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å —Ç–µ–∫—É—â–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã.')
      if (!confirmed) {
        return
      }
    }

    const mapping = createMapping()
    if (onApplyAndSave) {
      onApplyAndSave(mapping)
    }
    onClose()
  }, [createMapping, onApplyAndSave, onClose, fieldAssignments])

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const previewData = useMemo(() => {
    if (sampleData.length === 0) return []

    const amountField = fieldAssignments.find(f => f.field === 'amount')
    const descriptionField = fieldAssignments.find(f => f.field === 'description')
    const cityField = fieldAssignments.find(f => f.field === 'city')
    const dateField = fieldAssignments.find(f => f.field === 'expense_date')
    const timeField = fieldAssignments.find(f => f.field === 'expense_time')
    const notesField = fieldAssignments.find(f => f.field === 'notes')

    // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (!isEditingMode && (amountField?.assignedColumn === null || amountField?.assignedColumn === undefined ||
        descriptionField?.assignedColumn === null || descriptionField?.assignedColumn === undefined)) {
      return []
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ columnOrder
    const reorderedData = sampleData.map(row => {
      const reorderedRow: string[] = []
      columnOrder.forEach((originalIndex, newIndex) => {
        reorderedRow[newIndex] = row[originalIndex] || ''
      })
      return reorderedRow
    })

    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    return reorderedData.map(row => ({
      amount: amountField && amountField.assignedColumn !== null && amountField.assignedColumn !== undefined ?
        row[columnOrder.indexOf(amountField.assignedColumn)] || '' : '',
      description: descriptionField && descriptionField.assignedColumn !== null && descriptionField.assignedColumn !== undefined ?
        row[columnOrder.indexOf(descriptionField.assignedColumn)] || '' : '',
      city: cityField && cityField.assignedColumn !== null && cityField.assignedColumn !== undefined ?
        row[columnOrder.indexOf(cityField.assignedColumn)] || '' : '',
      expense_date: dateField && dateField.assignedColumn !== null && dateField.assignedColumn !== undefined ?
        row[columnOrder.indexOf(dateField.assignedColumn)] || '' : '',
      expense_time: timeField && timeField.assignedColumn !== null && timeField.assignedColumn !== undefined ?
        row[columnOrder.indexOf(timeField.assignedColumn)] || '' : '',
      notes: notesField && notesField.assignedColumn !== null && notesField.assignedColumn !== undefined ?
        row[columnOrder.indexOf(notesField.assignedColumn)] || '' : ''
    }))
  }, [sampleData, fieldAssignments, columnOrder, isEditingMode])

  // –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const handleReset = useCallback(() => {
    if (sampleData.length === 0) return

    const columnCount = Math.max(...sampleData.map(row => row.length))

    setColumnOrder(Array.from({ length: columnCount }, (_, index) => index))
    setFieldAssignments(createDefaultFieldAssignments())
    setHiddenColumns(new Set())
  }, [sampleData])

  if (sampleData.length === 0) {
    return (
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤"
        size="lg"
      >
        <div className="text-center py-8">
          <div className="text-gray-500">
            <p className="text-lg mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
            <p className="text-sm">–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</p>
          </div>
        </div>
      </Modal>
    )
  }

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={
        isEditingMode 
          ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã —Å—Ç–æ–ª–±—Ü–æ–≤" 
          : savedMapping && savedMapping.length === columnOrder.length 
            ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞)" 
            : "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤"
      }
      size="lg"
    >
      <div className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {isEditingMode && (
          <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
              <span className="text-sm text-blue-800 font-medium">
                –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
              </span>
            </div>
            <p className="text-xs text-blue-700 mt-1">
              –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±—É–¥—É—â–∏–º –º–∞—Å—Å–æ–≤—ã–º –≤–≤–æ–¥–∞–º
            </p>
          </div>
        )}

        {/* –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ */}
        <div className="mb-8">
          <div className="flex items-center justify-between gap-4 mb-2">
            <div className="flex items-center gap-2">
              <h3 className="font-medium text-gray-900">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h3>
              <Tooltip content="–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞ —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–º—É –ø–æ–ª–µ">
                <div className="w-4 h-4 bg-gray-400 text-white rounded-full flex items-center justify-center text-xs cursor-help">
                  ?
                </div>
              </Tooltip>
            </div>
            {tableDescription && onReplaceTable && !isEditingMode && (
              <div className="flex items-center gap-2 text-sm">
                <span>üìù</span>
                <span className="font-semibold text-gray-700" title={tableDescription}>
                  {tableDescription}
                </span>
                <Button variant="primary" size="sm" onClick={onReplaceTable}>
                  –ó–∞–º–µ–Ω–∏—Ç—å
                </Button>
              </div>
            )}
          </div>

          <p className="mb-3 text-xs text-gray-500">
            –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≥–æ—Ä–æ–¥.
          </p>

          <div className="bg-white border rounded-lg overflow-hidden mb-4">
            {visibleColumnOrder.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="text-sm" style={{ width: 'auto', minWidth: '100%' }}>
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      {visibleColumnOrder.map(originalIndex => {
                        const assignedFields = getAssignedFields(originalIndex)
                        const columnLabel = getColumnDisplayLabel(originalIndex)
                        const isOpen = openColumnPicker === originalIndex

                        return (
                          <th key={originalIndex} className="p-2 align-top">
                            <div
                              className="flex flex-col items-center gap-2"
                              ref={node => {
                                if (node) {
                                  columnPickerRefs.current[originalIndex] = node
                                } else {
                                  delete columnPickerRefs.current[originalIndex]
                                }
                              }}
                            >
                              <div className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                                {columnLabel}
                              </div>
                              <div className="w-full max-w-[240px]">
                                <button
                                  type="button"
                                  onClick={() =>
                                    setOpenColumnPicker(prev =>
                                      prev === originalIndex ? null : originalIndex
                                    )
                                  }
                                  aria-expanded={isOpen}
                                  className={`flex w-full items-center justify-between rounded-md border px-3 py-1.5 text-xs font-medium transition focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 ${
                                    assignedFields.length > 0
                                      ? 'border-gray-300 bg-white text-gray-700 hover:border-blue-300 hover:text-blue-700'
                                      : 'border-dashed border-gray-300 bg-white text-gray-400 hover:border-blue-300 hover:text-blue-600'
                                  }`}
                                >
                                  <span>
                                    {assignedFields.length > 0
                                      ? '–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä'
                                      : '–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—è'}
                                  </span>
                                  <span
                                    className={`ml-2 text-gray-400 transition-transform ${
                                      isOpen ? 'rotate-180' : ''
                                    }`}
                                    aria-hidden
                                  >
                                    ‚ñæ
                                  </span>
                                </button>
                              </div>
                              {isOpen && pickerPosition && typeof window !== 'undefined'
                                ? createPortal(
                                    (
                                      <div
                                        ref={node => {
                                          dropdownContainerRef.current = node
                                        }}
                                        className="z-[2000] rounded-md border border-gray-200 bg-white shadow-xl"
                                        style={{
                                          position: 'fixed',
                                          top: pickerPosition.top,
                                          left: pickerPosition.left,
                                          width: pickerPosition.width
                                        }}
                                      >
                                        <div className="max-h-56 overflow-y-auto p-2 space-y-1">
                                          {COLUMN_FIELD_OPTIONS.map(option => {
                                            const fieldMeta = fieldAssignments.find(item => item.field === option.field)
                                            const isChecked = assignedFields.includes(option.field)
                                            const isRequired = Boolean(fieldMeta?.required) && fieldMeta?.assignedColumn === null
                                            const assignedColumnIndex = fieldMeta?.assignedColumn
                                            const isAssignedElsewhere =
                                              typeof assignedColumnIndex === 'number' &&
                                              assignedColumnIndex !== originalIndex
                                            const assignedDisplayLabel =
                                              isAssignedElsewhere && typeof assignedColumnIndex === 'number'
                                                ? getColumnDisplayLabel(assignedColumnIndex)
                                                : null

                                            return (
                                              <label
                                                key={option.field}
                                                className="flex items-start gap-2 rounded-md px-2 py-1 text-xs hover:bg-gray-50"
                                              >
                                                <input
                                                  type="checkbox"
                                                  checked={isChecked}
                                                  onChange={() => toggleFieldForColumn(option.field, originalIndex)}
                                                  className="mt-0.5 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                                />
                                                <div className="flex flex-col">
                                                  <span className="flex items-center gap-2 text-gray-700">
                                                    <span aria-hidden>{option.icon}</span>
                                                    <span>{option.label}</span>
                                                  </span>
                                                  {isAssignedElsewhere && assignedDisplayLabel && (
                                                    <span className="pl-6 text-[11px] text-amber-600">
                                                      –£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {assignedDisplayLabel}
                                                    </span>
                                                  )}
                                                  {isRequired && (
                                                    <span className="pl-6 text-[11px] text-red-600">
                                                      –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                                                    </span>
                                                  )}
                                                </div>
                                              </label>
                                            )
                                          })}
                                        </div>
                                        <div className="border-t border-gray-100 px-3 py-2 text-xs text-gray-600">
                                          <button
                                            type="button"
                                            onClick={() => toggleColumnHidden(originalIndex)}
                                            className="flex items-center gap-2 text-left text-gray-700 hover:text-blue-600"
                                          >
                                            <span aria-hidden>{hiddenColumns.has(originalIndex) ? 'üëÄ' : 'üôà'}</span>
                                            <span>
                                              {hiddenColumns.has(originalIndex)
                                                ? '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü'
                                                : '–°–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü'}
                                            </span>
                                          </button>
                                          <p className="mt-1 text-[11px] text-gray-400">
                                            –°–∫—Ä—ã—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –±—É–¥—É—Ç –º–µ—à–∞—Ç—å, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –∏—Ö –Ω–∏–∂–µ.
                                          </p>
                                        </div>
                                      </div>
                                    ),
                                    document.body
                                  )
                                : null}
                              <div className="flex min-h-[24px] flex-wrap justify-center gap-1">
                                {assignedFields.length > 0 ? (
                                  assignedFields.map(field => (
                                    <span
                                      key={field}
                                      className={`inline-flex items-center gap-1 rounded-full border px-2 py-0.5 text-[11px] ${FIELD_COLORS[field]}`}
                                    >
                                      <span aria-hidden>{FIELD_ICONS[field]}</span>
                                      <span>{FIELD_LABELS[field]}</span>
                                    </span>
                                  ))
                                ) : (
                                  <span className="text-xs text-gray-400">–ü–æ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</span>
                                )}
                              </div>
                            </div>
                          </th>
                        )
                      })}
                    </tr>
                  </thead>
                  <tbody>
                    {sampleData.slice(0, 5).map((row, rowIndex) => (
                      <tr key={rowIndex} className="border-b hover:bg-gray-50">
                        {visibleColumnOrder.map(originalIndex => (
                          <td key={originalIndex} className="px-4 py-3 text-gray-900 whitespace-nowrap">
                            {row[originalIndex] || '‚Äî'}
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="px-6 py-8 text-center text-sm text-gray-500">
                –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Å–∫—Ä—ã—Ç—ã. –†–∞—Å–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.
              </div>
            )}
            {sampleData.length > 5 && visibleColumnOrder.length > 0 && (
              <div className="px-4 py-2 bg-gray-50 text-sm text-gray-600 text-center">
                ... –∏ –µ—â–µ {sampleData.length - 5} –∑–∞–ø–∏—Å–µ–π
              </div>
            )}
          </div>

          {hiddenColumnOrder.length > 0 && (
            <div className="rounded-lg border border-dashed border-gray-300 bg-gray-50 p-3">
              <div 
                className="flex items-center justify-between cursor-pointer"
                onClick={() => setIsHiddernColumnsVisible(!isHiddernColumnsVisible)}
              >
                <div className="flex items-center gap-2">
                  <div className="text-xs font-semibold uppercase tracking-wide text-gray-600">
                    –°–∫—Ä—ã—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã ({hiddenColumnOrder.length})
                  </div>
                </div>
                <div className="flex items-center gap-2">
                    <p className="text-[11px] text-gray-500 hidden sm:block">
                      –ú—ã –∑–∞–ø–æ–º–Ω–∏–º –∏—Ö –ø–æ–∑–∏—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø—Ä—è—á–µ–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏–º–ø–æ—Ä—Ç–µ.
                    </p>
                    <span className={`ml-2 text-gray-400 transition-transform ${isHiddernColumnsVisible ? 'rotate-180' : ''}`} aria-hidden>
                        ‚ñæ
                    </span>
                </div>
              </div>
              {isHiddernColumnsVisible && (
                <div className="mt-3 flex flex-wrap gap-2">
                  {hiddenColumnOrder.map(originalIndex => {
                    const columnLabel = getColumnDisplayLabel(originalIndex)
                    const sampleValue = sampleData[0]?.[originalIndex] || ''
                    return (
                      <div
                        key={originalIndex}
                        className="flex items-center gap-2 rounded-md border border-gray-200 bg-white px-3 py-2 shadow-sm"
                      >
                        <div className="text-xs font-medium text-gray-700">{columnLabel}</div>
                        {sampleValue && (
                          <div
                            className="max-w-[140px] truncate text-[11px] text-gray-400"
                            title={sampleValue}
                          >
                            {sampleValue}
                          </div>
                        )}
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleColumnHidden(originalIndex)}
                        >
                          –ü–æ–∫–∞–∑–∞—Ç—å
                        </Button>
                      </div>
                    )
                  })}
                </div>
              )}
            </div>
          )}
        </div>

        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        <div className="mb-6">
          <div className="flex items-center gap-2 mb-4">
            <h3 className="font-medium text-gray-900">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</h3>
            <Tooltip content="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏">
              <div className="w-4 h-4 bg-gray-400 text-white rounded-full flex items-center justify-center text-xs cursor-help">
                ?
              </div>
            </Tooltip>
          </div>
          
          {previewData.length > 0 ? (
            <div className="bg-white border rounded-lg overflow-hidden">
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üí∞ –°—É–º–º–∞</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìù –û–ø–∏—Å–∞–Ω–∏–µ</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìç –ì–æ—Ä–æ–¥</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìÖ –î–∞—Ç–∞</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">‚è∞ –í—Ä–µ–º—è</th>
                      <th className="px-4 py-3 text-left font-medium text-gray-700 whitespace-nowrap">üìã –ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {previewData.slice(0, 5).map((row, rowIndex) => (
                      <tr key={rowIndex} className="border-b hover:bg-gray-50">
                        <td className="px-4 py-3 font-medium text-green-700 whitespace-nowrap">
                          {row.amount || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-blue-700 whitespace-nowrap">
                          {row.description || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-indigo-700 whitespace-nowrap">
                          {row.city || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-purple-700 whitespace-nowrap">
                          {row.expense_date || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-teal-700 whitespace-nowrap">
                          {row.expense_time || '‚Äî'}
                        </td>
                        <td className="px-4 py-3 text-yellow-700 whitespace-nowrap">
                          {row.notes || '‚Äî'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              {previewData.length > 5 && (
                <div className="px-4 py-2 bg-gray-50 text-sm text-gray-600 text-center">
                  ... –∏ –µ—â–µ {previewData.length - 5} –∑–∞–ø–∏—Å–µ–π
                </div>
              )}
            </div>
          ) : (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <div className="text-yellow-600">‚ö†Ô∏è</div>
                <div className="text-sm text-yellow-800">
                  –ù–∞–∑–Ω–∞—á—å—Ç–µ —Ö–æ—Ç—è –±—ã –ø–æ–ª—è &quot;–°—É–º–º–∞&quot; –∏ &quot;–û–ø–∏—Å–∞–Ω–∏–µ&quot; –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-between items-center pt-6 border-t">
          <div className="flex space-x-3">
            <Tooltip content="–í–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é">
              <Button
                variant="outline"
                onClick={handleReset}
                className="text-gray-600"
              >
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </Tooltip>
          </div>
          
          <div className="flex space-x-3">
            <Button
              variant="outline"
              onClick={onClose}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            
            {isEditingMode ? (
              <Tooltip content="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤">
                <Button
                  variant="primary"
                  onClick={handleApply}
                >
                  ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
              </Tooltip>
            ) : (
              <>
                <Tooltip content="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ">
                  <Button
                    variant="outline"
                    onClick={handleApply}
                    disabled={previewData.length === 0}
                  >
                    üìù –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </Tooltip>
                
                {onApplyAndSave && (
                  <Tooltip content="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã">
                    <Button
                      variant="primary"
                      onClick={handleApplyAndSave}
                      disabled={previewData.length === 0}
                    >
                      üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                  </Tooltip>
                )}
              </>
            )}
          </div>
        </div>
      </div>
    </Modal>
  )
}