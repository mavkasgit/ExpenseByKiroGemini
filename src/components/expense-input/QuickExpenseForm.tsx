'use client'

import { useState, useTransition, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card } from '@/components/ui/Card'
import { DatePicker } from '@/components/ui/DatePicker'
import { TimeInput } from '@/components/ui/TimeInput'
import { createExpense } from '@/lib/actions/expenses'
import { getCurrentDateISO, getCurrentTimeHHMM } from '@/lib/utils/dateUtils'
import type { CreateExpenseData } from '@/types'
import { useToast } from '@/hooks/useToast'

interface QuickExpenseFormProps {
  onSuccess?: (expense: any) => void
  className?: string
}

export function QuickExpenseForm({ 
  onSuccess,
  className = '' 
}: QuickExpenseFormProps) {
  const [isPending, startTransition] = useTransition()
  const { showToast } = useToast()
  const amountInputRef = useRef<HTMLInputElement>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã - —É–±–∏—Ä–∞–µ–º category_id
  const [formData, setFormData] = useState({
    amount: 0,
    description: '',
    notes: '',
    expense_date: getCurrentDateISO(),
    expense_time: getCurrentTimeHHMM(),
    input_method: 'single' as const
  })

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å—É–º–º—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (amountInputRef.current) {
      amountInputRef.current.focus()
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
  const handleDescriptionChange = (value: string) => {
    setFormData(prev => ({ ...prev, description: value }))
  }

  // –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã (Enter –≤ –ª—é–±–æ–º –ø–æ–ª–µ)
  const handleQuickSubmit = async () => {
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.amount || formData.amount <= 0) {
      showToast('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞', 'error')
      amountInputRef.current?.focus()
      return
    }

    if (!formData.description || formData.description.trim().length === 0) {
      showToast('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error')
      return
    }

    startTransition(async () => {
      try {
        // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const expenseData: CreateExpenseData = {
          amount: formData.amount,
          description: formData.description,
          notes: formData.notes || undefined,
          expense_date: formData.expense_date,
          expense_time: formData.expense_time || undefined,
          input_method: formData.input_method
          // category_id –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç
        }

        const result = await createExpense(expenseData)

        if (result.error) {
          showToast(result.error, 'error')
          return
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (result.data?.auto_categorized) {
          showToast('–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success')
        } else {
          showToast('–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ', 'info')
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        setFormData(prev => ({
          amount: 0,
          description: '',
          notes: '',
          expense_date: prev.expense_date, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É
          expense_time: getCurrentTimeHHMM(), // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ
          input_method: 'single'
        }))

        // –§–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—É–º–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞
        setTimeout(() => {
          amountInputRef.current?.focus()
        }, 100)

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (onSuccess) {
          onSuccess(result.data)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:', error)
        showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 'error')
      }
    })
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !isPending) {
      e.preventDefault()
      handleQuickSubmit()
    }
  }

  return (
    <Card className={`p-4 ${className}`}>
      <div className="space-y-3">
        <div className="text-sm font-medium text-gray-700 mb-3">
          –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–∞
        </div>

        {/* –°—É–º–º–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
        <div className="grid grid-cols-2 gap-3">
          {/* –°—É–º–º–∞ */}
          <div>
            <Input
              ref={amountInputRef}
              type="number"
              step="0.01"
              min="0"
              value={formData.amount || ''}
              onChange={(e) => setFormData(prev => ({ 
                ...prev, 
                amount: parseFloat(e.target.value) || 0 
              }))}
              onKeyPress={handleKeyPress}
              placeholder="–°—É–º–º–∞"
              disabled={isPending}
              className="text-lg"
            />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <Input
              type="text"
              value={formData.description}
              onChange={(e) => handleDescriptionChange(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"
              disabled={isPending}
            />
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ */}
        <div>
          <Input
            type="text"
            value={formData.notes}
            onChange={(e) => setFormData(prev => ({ 
              ...prev, 
              notes: e.target.value 
            }))}
            onKeyPress={handleKeyPress}
            placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            disabled={isPending}
            maxLength={1000}
          />
        </div>

        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
        <div className="grid grid-cols-2 gap-3">
          {/* –î–∞—Ç–∞ */}
          <div>
            <DatePicker
              value={formData.expense_date}
              onChange={(value) => setFormData(prev => ({ 
                ...prev, 
                expense_date: value 
              }))}
              onKeyPress={handleKeyPress}
              disabled={isPending}
              placeholder="–î–∞—Ç–∞"
            />
          </div>

          {/* –í—Ä–µ–º—è */}
          <div>
            <TimeInput
              value={formData.expense_time}
              onChange={(value) => setFormData(prev => ({ 
                ...prev, 
                expense_time: value 
              }))}
              onKeyPress={handleKeyPress}
              disabled={isPending}
            />
          </div>
        </div>

        <div className="text-xs text-blue-600">
          üí° –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <Button
          onClick={handleQuickSubmit}
          disabled={isPending || !formData.amount || !formData.description.trim()}
          className="w-full"
          size="sm"
        >
          {isPending ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å (Enter)'}
        </Button>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <div className="text-xs text-gray-500 text-center">
          –ù–∞–∂–º–∏—Ç–µ Enter –≤ –ª—é–±–æ–º –ø–æ–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        </div>
      </div>
    </Card>
  )
}