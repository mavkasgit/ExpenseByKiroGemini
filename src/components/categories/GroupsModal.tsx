'use client'

import { useState, useRef, useEffect } from 'react'
import { Button, Input, Modal, useToast } from '@/components/ui'
import { createCategoryGroup, updateCategoryGroup, deleteCategoryGroup, getCategoryGroups } from '@/lib/actions/categories'

interface Group {
  id: string
  name: string
  icon?: string
  color?: string
  description?: string
  created_at: string
}

interface GroupsModalProps {
  isOpen: boolean
  onClose: () => void
  onSuccess: () => void
}

const availableColors = [
  '#6366f1', // –ò–Ω–¥–∏–≥–æ
  '#ef4444', // –ö—Ä–∞—Å–Ω—ã–π
  '#10b981', // –ó–µ–ª–µ–Ω—ã–π
  '#f59e0b', // –ñ–µ–ª—Ç—ã–π
  '#8b5cf6', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
  '#06b6d4', // –ì–æ–ª—É–±–æ–π
  '#f97316', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  '#84cc16', // –õ–∞–π–º
  '#ec4899', // –†–æ–∑–æ–≤—ã–π
  '#6b7280', // –°–µ—Ä—ã–π
  '#14b8a6', // –ë–∏—Ä—é–∑–æ–≤—ã–π
  '#f43f5e', // –†–æ–∑–∞
  '#a855f7', // –ü—É—Ä–ø—É—Ä–Ω—ã–π
  '#3b82f6', // –°–∏–Ω–∏–π
  '#22c55e', // –ó–µ–ª–µ–Ω—ã–π –ª–∞–π–º
  '#eab308', // –Ø–Ω—Ç–∞—Ä–Ω—ã–π
]

const availableIcons = [
  { key: 'shopping-bag', emoji: 'üõçÔ∏è', names: ['–ø–æ–∫—É–ø–∫–∏', '–º–∞–≥–∞–∑–∏–Ω', '—à–æ–ø–ø–∏–Ω–≥'] },
  { key: 'car', emoji: 'üöó', names: ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] },
  { key: 'home', emoji: 'üè†', names: ['–¥–æ–º', '–∂–∏–ª—å–µ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞'] },
  { key: 'food', emoji: 'üçΩÔ∏è', names: ['–µ–¥–∞', '–ø–∏—Ç–∞–Ω–∏–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'] },
  { key: 'health', emoji: 'üè•', names: ['–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–±–æ–ª—å–Ω–∏—Ü–∞'] },
  { key: 'entertainment', emoji: 'üé¨', names: ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä'] },
  { key: 'education', emoji: 'üìö', names: ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–µ–±–∞', '—à–∫–æ–ª–∞'] },
  { key: 'travel', emoji: '‚úàÔ∏è', names: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ—Ç–ø—É—Å–∫', '–ø–æ–µ–∑–¥–∫–∏'] },
  { key: 'sport', emoji: '‚öΩ', names: ['—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'] },
  { key: 'clothes', emoji: 'üëï', names: ['–æ–¥–µ–∂–¥–∞', '–≤–µ—â–∏', '–≥–∞—Ä–¥–µ—Ä–æ–±'] },
  { key: 'bills', emoji: 'üìÑ', names: ['—Å—á–µ—Ç–∞', '–ø–ª–∞—Ç–µ–∂–∏', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ'] },
  { key: 'other', emoji: 'üì¶', names: ['–¥—Ä—É–≥–æ–µ', '–ø—Ä–æ—á–µ–µ', '—Ä–∞–∑–Ω–æ–µ'] },
  { key: 'work', emoji: 'üíº', names: ['—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å', '–¥–µ–ª–æ–≤—ã–µ'] },
  { key: 'baby', emoji: 'üë∂', names: ['—Ä–µ–±–µ–Ω–æ–∫', '–¥–µ—Ç–∏', '–¥–µ—Ç—Å–∫–∏–µ'] },
  { key: 'pet', emoji: 'üêï', names: ['–ø–∏—Ç–æ–º—Ü—ã', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '—Å–æ–±–∞–∫–∞'] },
  { key: 'beauty', emoji: 'üíÑ', names: ['–∫—Ä–∞—Å–æ—Ç–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', '—Å–∞–ª–æ–Ω'] },
  { key: 'tools', emoji: 'üîß', names: ['–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '—Ä–µ–º–æ–Ω—Ç', '—Å—Ç—Ä–æ–π–∫–∞'] },
  { key: 'garden', emoji: 'üå±', names: ['—Å–∞–¥', '–æ–≥–æ—Ä–æ–¥', '—Ä–∞—Å—Ç–µ–Ω–∏—è'] },
  { key: 'cleaning', emoji: 'üßΩ', names: ['—É–±–æ—Ä–∫–∞', '—á–∏—Å—Ç–∫–∞', '–º–æ—é—â–∏–µ'] },
  { key: 'gift', emoji: 'üéÅ', names: ['–ø–æ–¥–∞—Ä–∫–∏', '—Å—É–≤–µ–Ω–∏—Ä—ã', '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏'] }
]

export function GroupsModal({ isOpen, onClose, onSuccess }: GroupsModalProps) {
  const [groups, setGroups] = useState<Group[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [editingGroup, setEditingGroup] = useState<Group | null>(null)
  const [isCreating, setIsCreating] = useState(false)
  const [selectedGroups, setSelectedGroups] = useState<Set<string>>(new Set())
  const [isDeleting, setIsDeleting] = useState(false)
  const [newGroupName, setNewGroupName] = useState('')
  const [newGroupIcon, setNewGroupIcon] = useState('shopping-bag')
  const [newGroupColor, setNewGroupColor] = useState('#6366f1')
  const [newGroupDescription, setNewGroupDescription] = useState('')
  const [iconSearchTerm, setIconSearchTerm] = useState('')
  const nameInputRef = useRef<HTMLInputElement>(null)
  const toast = useToast()

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (isOpen) {
      loadGroups()
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isOpen]) // loadGroups —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
  useEffect(() => {
    if (isCreating && nameInputRef.current) {
      nameInputRef.current.focus()
    }
  }, [isCreating])

  const handleCreateGroup = async () => {
    if (!newGroupName.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
      return
    }

    try {
      const result = await createCategoryGroup({
        name: newGroupName.trim(),
        icon: newGroupIcon,
        color: newGroupColor,
        description: newGroupDescription.trim() || undefined
      })

      if ('error' in result) {
        toast.error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã')
      } else {
        toast.success('–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞')
        setNewGroupName('')
        setNewGroupIcon('shopping-bag')
        setNewGroupColor('#6366f1')
        setNewGroupDescription('')
        setIsCreating(false)
        loadGroups()
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã')
    }
  }

  const loadGroups = async () => {
    setIsLoading(true)
    try {
      const result = await getCategoryGroups()
      if ('error' in result) {
        toast.error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      } else {
        setGroups(result.data || [])
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø')
    } finally {
      setIsLoading(false)
    }
  }



  const handleUpdateGroup = async (group: Group, newName: string, newIcon: string, newColor: string, newDescription: string) => {
    try {
      const result = await updateCategoryGroup(group.id, {
        name: newName.trim(),
        icon: newIcon,
        color: newColor,
        description: newDescription.trim() || undefined
      })

      if ('error' in result) {
        toast.error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      } else {
        toast.success('–ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        setEditingGroup(null)
        loadGroups()
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã')
    }
  }

  const handleDeleteGroup = async (group: Group) => {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É "${group.name}"? –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É "–û—Å–Ω–æ–≤–Ω—ã–µ".`)) {
      return
    }

    try {
      const result = await deleteCategoryGroup(group.id)

      if ('error' in result) {
        toast.error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      } else {
        toast.success('–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞')
        loadGroups()
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã')
    }
  }

  const handleToggleGroupSelection = (groupId: string) => {
    setSelectedGroups(prev => {
      const newSet = new Set(prev)
      if (newSet.has(groupId)) {
        newSet.delete(groupId)
      } else {
        newSet.add(groupId)
      }
      return newSet
    })
  }

  const handleSelectAllGroups = () => {
    if (selectedGroups.size === groups.length) {
      setSelectedGroups(new Set())
    } else {
      setSelectedGroups(new Set(groups.map(group => group.id)))
    }
  }

  const handleDeleteSelectedGroups = async () => {
    if (selectedGroups.size === 0) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    const selectedGroupNames = groups
      .filter(group => selectedGroups.has(group.id))
      .map(group => group.name)
      .join(', ')

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (${selectedGroups.size}): ${selectedGroupNames}?\n\n–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É "–û—Å–Ω–æ–≤–Ω—ã–µ".`)) {
      return
    }

    setIsDeleting(true)
    let successCount = 0
    let errorCount = 0

    try {
      for (const groupId of selectedGroups) {
        try {
          const result = await deleteCategoryGroup(groupId)
          if ('error' in result) {
            errorCount++
          } else {
            successCount++
          }
        } catch (error) {
          errorCount++
        }
      }

      if (successCount > 0) {
        toast.success(`–£–¥–∞–ª–µ–Ω–æ ${successCount} –≥—Ä—É–ø–ø`)
        setSelectedGroups(new Set())
        loadGroups()
        onSuccess() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        handleClose() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
      }

      if (errorCount > 0) {
        toast.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${errorCount} –≥—Ä—É–ø–ø`)
      }
    } finally {
      setIsDeleting(false)
    }
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
  const filteredIcons = availableIcons.filter(icon => {
    if (iconSearchTerm === '') return true
    
    const searchLower = iconSearchTerm.toLowerCase()
    return icon.names.some(name => name.toLowerCase().includes(searchLower)) ||
           icon.key.toLowerCase().includes(searchLower)
  })

  const handleClose = () => {
    setEditingGroup(null)
    setIsCreating(false)
    setSelectedGroups(new Set())
    setNewGroupName('')
    setNewGroupIcon('shopping-bag')
    setIconSearchTerm('')
    onClose()
  }

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏"
      description="–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
      size="lg"
    >
      <div className="space-y-6">
        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã */}
        {!isCreating && (
          <div className="flex justify-end">
            <Button
              variant="primary"
              onClick={() => setIsCreating(true)}
              leftIcon={
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              }
            >
              –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
            </Button>
          </div>
        )}

        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã */}
        {isCreating && (
          <div className="bg-gray-50 p-4 rounded-lg space-y-4">
            <h4 className="font-medium text-gray-900">–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞</h4>
            
            <Input
              ref={nameInputRef}
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
              value={newGroupName}
              onChange={(e) => setNewGroupName(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ–±–±–∏, –ü–æ–¥–ø–∏—Å–∫–∏, –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
              required
            />

            <Input
              label="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={newGroupDescription}
              onChange={(e) => setNewGroupDescription(e.target.value)}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
            />

            {/* –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¶–≤–µ—Ç –≥—Ä—É–ø–ø—ã
              </label>
              <div className="flex flex-wrap gap-2">
                {availableColors.map((color) => (
                  <button
                    key={color}
                    type="button"
                    onClick={() => setNewGroupColor(color)}
                    className={`
                      w-8 h-8 rounded-full border-2 transition-all duration-200 hover:scale-110
                      ${newGroupColor === color 
                        ? 'border-gray-600 shadow-lg ring-2 ring-gray-300' 
                        : 'border-gray-200 hover:border-gray-400'
                      }
                    `}
                    style={{ backgroundColor: color }}
                  />
                ))}
              </div>
            </div>

            {/* –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ò–∫–æ–Ω–∫–∞ –≥—Ä—É–ø–ø—ã
              </label>
              
              <Input
                value={iconSearchTerm}
                onChange={(e) => setIconSearchTerm(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏..."
                className="mb-3"
              />
              
              <div className="grid grid-cols-8 gap-2 max-h-32 overflow-y-auto">
                {filteredIcons.map((icon) => (
                  <button
                    key={icon.key}
                    type="button"
                    onClick={() => setNewGroupIcon(icon.key)}
                    className={`
                      p-2 rounded-lg border-2 transition-all duration-200 hover:scale-105
                      ${newGroupIcon === icon.key 
                        ? 'border-indigo-500 bg-indigo-50' 
                        : 'border-gray-200 hover:border-gray-300'
                      }
                    `}
                    title={icon.names[0]}
                  >
                    <div className="text-lg">{icon.emoji}</div>
                  </button>
                ))}
              </div>
            </div>

            <div className="flex justify-end space-x-3">
              <Button
                variant="ghost"
                onClick={() => {
                  setIsCreating(false)
                  setNewGroupName('')
                  setNewGroupIcon('shopping-bag')
                  setNewGroupColor('#6366f1')
                  setNewGroupDescription('')
                  setIconSearchTerm('')
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                variant="primary"
                onClick={handleCreateGroup}
              >
                –°–æ–∑–¥–∞—Ç—å
              </Button>
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="font-medium text-gray-900">
              –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã ({groups.length})
            </h4>
            
            {groups.length > 0 && (
              <div className="flex items-center space-x-3">
                {selectedGroups.size > 0 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleDeleteSelectedGroups}
                    disabled={isDeleting}
                    className="text-red-600 hover:text-red-700 hover:bg-red-50"
                  >
                    {isDeleting ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : `–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (${selectedGroups.size})`}
                  </Button>
                )}
                
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleSelectAllGroups}
                >
                  {selectedGroups.size === groups.length ? '–°–Ω—è—Ç—å –≤—Å–µ' : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'}
                </Button>
              </div>
            )}
          </div>
          
          {isLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
              <p className="text-gray-500 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...</p>
            </div>
          ) : groups.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <div className="text-4xl mb-2">üìÅ</div>
              <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø</p>
            </div>
          ) : (
            <div className="space-y-2">
              {groups.map((group) => (
                <div 
                  key={group.id} 
                  className={`flex items-center justify-between p-3 border-2 rounded-lg transition-all ${
                    selectedGroups.has(group.id) 
                      ? 'border-indigo-500 bg-indigo-50' 
                      : 'border-gray-200 bg-white hover:border-gray-300'
                  }`}
                >
                  {editingGroup?.id === group.id ? (
                    <EditGroupForm
                      group={group}
                      onSave={handleUpdateGroup}
                      onCancel={() => setEditingGroup(null)}
                    />
                  ) : (
                    <>
                      <div className="flex items-center space-x-3">
                        <input
                          type="checkbox"
                          checked={selectedGroups.has(group.id)}
                          onChange={() => handleToggleGroupSelection(group.id)}
                          className="w-4 h-4 text-indigo-600 rounded focus:ring-indigo-500"
                        />
                        
                        <div 
                          className="w-12 h-12 rounded-full flex items-center justify-center text-xl"
                          style={{ backgroundColor: group.color + '20' }}
                        >
                          <span>
                            {availableIcons.find(icon => icon.key === group.icon)?.emoji || 'üì¶'}
                          </span>
                        </div>
                        <div className="flex-1">
                          <div className="font-medium text-gray-900">{group.name}</div>
                          {group.description && (
                            <div className="text-sm text-gray-600 mb-1">{group.description}</div>
                          )}
                          <div className="flex items-center space-x-2">
                            <div 
                              className="w-3 h-3 rounded-full"
                              style={{ backgroundColor: group.color || '#6366f1' }}
                            />
                            <div className="text-xs text-gray-500">
                              –°–æ–∑–¥–∞–Ω–∞ {new Date(group.created_at).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex space-x-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setEditingGroup(group)}
                        >
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDeleteGroup(group)}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </Button>
                      </div>
                    </>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex justify-end space-x-3 pt-4 border-t">
          <Button variant="ghost" onClick={handleClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          <Button variant="primary" onClick={() => { onSuccess(); handleClose(); }}>
            –ì–æ—Ç–æ–≤–æ
          </Button>
        </div>
      </div>
    </Modal>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
function EditGroupForm({ 
  group, 
  onSave, 
  onCancel 
}: { 
  group: Group
  onSave: (group: Group, name: string, icon: string, color: string, description: string) => void
  onCancel: () => void
}) {
  const [name, setName] = useState(group.name)
  const [icon, setIcon] = useState(group.icon || 'shopping-bag')
  const [color, setColor] = useState(group.color || '#6366f1')
  const [description, setDescription] = useState(group.description || '')
  const [iconSearchTerm, setIconSearchTerm] = useState('')

  const filteredIcons = availableIcons.filter(iconItem => {
    if (iconSearchTerm === '') return true
    
    const searchLower = iconSearchTerm.toLowerCase()
    return iconItem.names.some(name => name.toLowerCase().includes(searchLower)) ||
           iconItem.key.toLowerCase().includes(searchLower)
  })

  return (
    <div className="flex-1 space-y-3">
      <Input
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
        className="w-full"
      />

      <Input
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
        className="w-full"
      />

      {/* –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ */}
      <div>
        <div className="flex flex-wrap gap-1 mb-2">
          {availableColors.slice(0, 8).map((colorOption) => (
            <button
              key={colorOption}
              type="button"
              onClick={() => setColor(colorOption)}
              className={`
                w-6 h-6 rounded-full border-2 transition-all
                ${color === colorOption 
                  ? 'border-gray-600 shadow-lg' 
                  : 'border-gray-200 hover:border-gray-400'
                }
              `}
              style={{ backgroundColor: colorOption }}
            />
          ))}
        </div>
      </div>
      
      <div>
        <Input
          value={iconSearchTerm}
          onChange={(e) => setIconSearchTerm(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏..."
          className="mb-2"
        />
        
        <div className="grid grid-cols-6 gap-1">
          {filteredIcons.slice(0, 12).map((iconItem) => (
            <button
              key={iconItem.key}
              type="button"
              onClick={() => setIcon(iconItem.key)}
              className={`
                p-1 rounded border transition-all
                ${icon === iconItem.key 
                  ? 'border-indigo-500 bg-indigo-50' 
                  : 'border-gray-200 hover:border-gray-300'
                }
              `}
            >
              <div className="text-sm">{iconItem.emoji}</div>
            </button>
          ))}
        </div>
      </div>
      
      <div className="flex justify-end space-x-2">
        <Button variant="ghost" size="sm" onClick={onCancel}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button 
          variant="primary" 
          size="sm" 
          onClick={() => onSave(group, name, icon, color, description)}
          disabled={!name.trim()}
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </div>
    </div>
  )
}