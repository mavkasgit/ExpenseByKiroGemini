'use client'

import { useState, useRef, useEffect } from 'react'
import { Input, Button, useToast } from '@/components/ui'
import { createCategory, updateCategory, getCategoryGroups } from '@/lib/actions/categories'
import type { Category, CreateCategoryData } from '@/types'

interface CategoryFormProps {
  category?: Category
  onSuccess: (data?: any) => void
  onCancel: () => void
}

const availableColors = [
  '#6366f1', // –ò–Ω–¥–∏–≥–æ
  '#ef4444', // –ö—Ä–∞—Å–Ω—ã–π
  '#10b981', // –ó–µ–ª–µ–Ω—ã–π
  '#f59e0b', // –ñ–µ–ª—Ç—ã–π
  '#8b5cf6', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
  '#06b6d4', // –ì–æ–ª—É–±–æ–π
  '#f97316', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  '#84cc16', // –õ–∞–π–º
  '#ec4899', // –†–æ–∑–æ–≤—ã–π
  '#6b7280', // –°–µ—Ä—ã–π
  '#14b8a6', // –ë–∏—Ä—é–∑–æ–≤—ã–π
  '#f43f5e', // –†–æ–∑–∞
  '#a855f7', // –ü—É—Ä–ø—É—Ä–Ω—ã–π
  '#3b82f6', // –°–∏–Ω–∏–π
  '#22c55e', // –ó–µ–ª–µ–Ω—ã–π –ª–∞–π–º
  '#eab308', // –Ø–Ω—Ç–∞—Ä–Ω—ã–π
  '#dc2626', // –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–º–Ω—ã–π
  '#7c3aed', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–º–Ω—ã–π
  '#059669', // –ò–∑—É–º—Ä—É–¥–Ω—ã–π
  '#d97706', // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç–µ–º–Ω—ã–π
  '#be123c', // –ú–∞–ª–∏–Ω–æ–≤—ã–π
  '#7e22ce', // –ü—É—Ä–ø—É—Ä–Ω—ã–π —Ç–µ–º–Ω—ã–π
  '#1d4ed8', // –°–∏–Ω–∏–π —Ç–µ–º–Ω—ã–π
  '#16a34a', // –ó–µ–ª–µ–Ω—ã–π —Ç–µ–º–Ω—ã–π
  '#ca8a04'  // –ñ–µ–ª—Ç—ã–π —Ç–µ–º–Ω—ã–π
]

const availableIcons = [
  { key: 'shopping-bag', emoji: 'üõçÔ∏è', names: ['–ø–æ–∫—É–ø–∫–∏', '–º–∞–≥–∞–∑–∏–Ω', '—à–æ–ø–ø–∏–Ω–≥', '—Ç–æ—Ä–≥–æ–≤–ª—è', '—Ç–æ–≤–∞—Ä—ã'] },
  { key: 'car', emoji: 'üöó', names: ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∞–≤—Ç–æ', '–±–µ–Ω–∑–∏–Ω'] },
  { key: 'home', emoji: 'üè†', names: ['–¥–æ–º', '–∂–∏–ª—å–µ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∞—Ä–µ–Ω–¥–∞'] },
  { key: 'food', emoji: 'üçΩÔ∏è', names: ['–µ–¥–∞', '–ø–∏—Ç–∞–Ω–∏–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–æ–±–µ–¥'] },
  { key: 'health', emoji: 'üè•', names: ['–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ª–µ—á–µ–Ω–∏–µ', '–≤—Ä–∞—á'] },
  { key: 'entertainment', emoji: 'üé¨', names: ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä', '–¥–æ—Å—É–≥', '–æ—Ç–¥—ã—Ö'] },
  { key: 'education', emoji: 'üìö', names: ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–µ–±–∞', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∫—É—Ä—Å—ã'] },
  { key: 'travel', emoji: '‚úàÔ∏è', names: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ—Ç–ø—É—Å–∫', '–ø–æ–µ–∑–¥–∫–∏', '—Ç—É—Ä–∏–∑–º', '–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞'] },
  { key: 'sport', emoji: '‚öΩ', names: ['—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '—Ñ—É—Ç–±–æ–ª', '–∑–∞–ª'] },
  { key: 'clothes', emoji: 'üëï', names: ['–æ–¥–µ–∂–¥–∞', '–≤–µ—â–∏', '–≥–∞—Ä–¥–µ—Ä–æ–±', '–º–æ–¥–∞', '–æ–±—É–≤—å'] },
  { key: 'bills', emoji: 'üìÑ', names: ['—Å—á–µ—Ç–∞', '–ø–ª–∞—Ç–µ–∂–∏', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', '—É—Å–ª—É–≥–∏', '–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏'] },
  { key: 'other', emoji: 'üì¶', names: ['–¥—Ä—É–≥–æ–µ', '–ø—Ä–æ—á–µ–µ', '—Ä–∞–∑–Ω–æ–µ', '–æ—Å—Ç–∞–ª—å–Ω–æ–µ', '–ø—Ä–æ—á–∏–µ'] },
  { key: 'coffee', emoji: '‚òï', names: ['–∫–æ—Ñ–µ', '–Ω–∞–ø–∏—Ç–∫–∏', '—á–∞–π', '–∫–æ—Ñ–µ–π–Ω—è', '–±–∞—Ä–∏—Å—Ç–∞'] },
  { key: 'gas', emoji: '‚õΩ', names: ['–±–µ–Ω–∑–∏–Ω', '—Ç–æ–ø–ª–∏–≤–æ', '–∑–∞–ø—Ä–∞–≤–∫–∞', '–≥–∞–∑', '–∞–∑—Å'] },
  { key: 'phone', emoji: 'üì±', names: ['—Ç–µ–ª–µ—Ñ–æ–Ω', '–º–æ–±–∏–ª—å–Ω—ã–π', '—Å–≤—è–∑—å', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '—Å–æ—Ç–æ–≤—ã–π'] },
  { key: 'internet', emoji: 'üåê', names: ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–µ—Ç—å', 'wifi', '–ø—Ä–æ–≤–∞–π–¥–µ—Ä', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'] },
  { key: 'electricity', emoji: '‚ö°', names: ['—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Å–≤–µ—Ç', '—ç–Ω–µ—Ä–≥–∏—è', '—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è', '—Ç–æ–∫'] },
  { key: 'water', emoji: 'üíß', names: ['–≤–æ–¥–∞', '–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥', '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞'] },
  { key: 'rent', emoji: 'üè¢', names: ['–∞—Ä–µ–Ω–¥–∞', '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞', '—Å—ä–µ–º', '–Ω–∞–µ–º', '–∂–∏–ª—å–µ'] },
  { key: 'insurance', emoji: 'üõ°Ô∏è', names: ['—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ø–æ–ª–∏—Å', '–æ—Å–∞–≥–æ', '–∫–∞—Å–∫–æ'] },
  { key: 'bank', emoji: 'üè¶', names: ['–±–∞–Ω–∫', '–∫—Ä–µ–¥–∏—Ç', '–∑–∞–π–º', '–ø—Ä–æ—Ü–µ–Ω—Ç—ã', '–∫–æ–º–∏—Å—Å–∏—è'] },
  { key: 'gift', emoji: 'üéÅ', names: ['–ø–æ–¥–∞—Ä–∫–∏', '—Å—É–≤–µ–Ω–∏—Ä—ã', '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–Ω–æ–≤—ã–π –≥–æ–¥'] },
  { key: 'pet', emoji: 'üêï', names: ['–ø–∏—Ç–æ–º—Ü—ã', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä'] },
  { key: 'beauty', emoji: 'üíÑ', names: ['–∫—Ä–∞—Å–æ—Ç–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', '—Å–∞–ª–æ–Ω', '–º–∞–Ω–∏–∫—é—Ä'] },
  { key: 'taxi', emoji: 'üöï', names: ['—Ç–∞–∫—Å–∏', '—è–Ω–¥–µ–∫—Å', '—É–±–µ—Ä', '–ø–æ–µ–∑–¥–∫–∞', '–≤–æ–¥–∏—Ç–µ–ª—å'] },
  { key: 'bus', emoji: 'üöå', names: ['–∞–≤—Ç–æ–±—É—Å', '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–º–∞—Ä—à—Ä—É—Ç–∫–∞', '–ø—Ä–æ–µ–∑–¥', '–±–∏–ª–µ—Ç'] },
  { key: 'train', emoji: 'üöÜ', names: ['–ø–æ–µ–∑–¥', '—ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞', '–º–µ—Ç—Ä–æ', '–∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '—Ä–∂–¥'] },
  { key: 'plane', emoji: '‚úàÔ∏è', names: ['—Å–∞–º–æ–ª–µ—Ç', '–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã', '–ø–µ—Ä–µ–ª–µ—Ç', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è'] },
  { key: 'hotel', emoji: 'üè®', names: ['–æ—Ç–µ–ª—å', '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–Ω–æ–º–µ—Ä', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'] },
  { key: 'restaurant', emoji: 'üç¥', names: ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '—Å—Ç–æ–ª–æ–≤–∞—è', '–∑–∞–≤–µ–¥–µ–Ω–∏–µ', '–æ–±—â–µ–ø–∏—Ç'] },
  { key: 'pizza', emoji: 'üçï', names: ['–ø–∏—Ü—Ü–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ñ–∞—Å—Ç—Ñ—É–¥', '–ø–∏—Ü—Ü–µ—Ä–∏—è', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è'] },
  { key: 'burger', emoji: 'üçî', names: ['–±—É—Ä–≥–µ—Ä', '–º–∞–∫–¥–æ–Ω–∞–ª—å–¥—Å', '–∫—Ñ—Å', '—Ñ–∞—Å—Ç—Ñ—É–¥', '–≥–∞–º–±—É—Ä–≥–µ—Ä'] },
  { key: 'beer', emoji: 'üç∫', names: ['–ø–∏–≤–æ', '–∞–ª–∫–æ–≥–æ–ª—å', '–±–∞—Ä', '–ø–∞–±', '–Ω–∞–ø–∏—Ç–∫–∏'] },
  { key: 'wine', emoji: 'üç∑', names: ['–≤–∏–Ω–æ', '–∞–ª–∫–æ–≥–æ–ª—å', '–≤–∏–Ω–Ω—ã–π', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–¥–µ–≥—É—Å—Ç–∞—Ü–∏—è'] },
  { key: 'pharmacy', emoji: 'üíä', names: ['–∞–ø—Ç–µ–∫–∞', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã', '—Ç–∞–±–ª–µ—Ç–∫–∏', '–ø—Ä–µ–ø–∞—Ä–∞—Ç—ã'] },
  { key: 'doctor', emoji: 'üë®‚Äç‚öïÔ∏è', names: ['–≤—Ä–∞—á', '–¥–æ–∫—Ç–æ—Ä', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ø—Ä–∏–µ–º'] },
  { key: 'dentist', emoji: 'ü¶∑', names: ['—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–∑—É–±—ã', '–¥–∞–Ω—Ç–∏—Å—Ç', '–ª–µ—á–µ–Ω–∏–µ', '–∑—É–±–Ω–æ–π'] },
  { key: 'gym', emoji: 'üèãÔ∏è', names: ['—Å–ø–æ—Ä—Ç–∑–∞–ª', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª', '–∫–∞—á–∞–ª–∫–∞', '–∞–±–æ–Ω–µ–º–µ–Ω—Ç'] },
  { key: 'cinema', emoji: 'üé≠', names: ['–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä', '–±–∏–ª–µ—Ç—ã', '—Ñ–∏–ª—å–º', '—Å–ø–µ–∫—Ç–∞–∫–ª—å'] },
  { key: 'music', emoji: 'üéµ', names: ['–º—É–∑—ã–∫–∞', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–ø–æ–¥–ø–∏—Å–∫–∞', '—Å–ø–æ—Ç–∏—Ñ–∞–π', '—è–Ω–¥–µ–∫—Å –º—É–∑—ã–∫–∞'] },
  { key: 'game', emoji: 'üéÆ', names: ['–∏–≥—Ä—ã', '–≥–µ–π–º–ø–∞–¥', '–∫–æ–Ω—Å–æ–ª—å', '—Å—Ç–∏–º', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'] },
  { key: 'book', emoji: 'üìñ', names: ['–∫–Ω–∏–≥–∏', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '—á—Ç–µ–Ω–∏–µ', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—É—á–µ–±–Ω–∏–∫–∏'] },
  { key: 'laptop', emoji: 'üíª', names: ['–Ω–æ—É—Ç–±—É–∫', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ—Ö–Ω–∏–∫–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ø–∫'] },
  { key: 'camera', emoji: 'üì∑', names: ['–∫–∞–º–µ—Ä–∞', '—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', '—Ñ–æ—Ç–æ', '—Å—ä–µ–º–∫–∞', '—Ç–µ—Ö–Ω–∏–∫–∞'] },
  { key: 'tools', emoji: 'üîß', names: ['–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '—Ä–µ–º–æ–Ω—Ç', '—Å—Ç—Ä–æ–π–∫–∞', '–º–∞—Å—Ç–µ—Ä', '—Ä–∞–±–æ—Ç—ã'] },
  { key: 'garden', emoji: 'üå±', names: ['—Å–∞–¥', '–æ–≥–æ—Ä–æ–¥', '—Ä–∞—Å—Ç–µ–Ω–∏—è', '–¥–∞—á–∞', '—Ü–≤–µ—Ç—ã'] },
  { key: 'cleaning', emoji: 'üßΩ', names: ['—É–±–æ—Ä–∫–∞', '—á–∏—Å—Ç–∫–∞', '–º–æ—é—â–∏–µ', '—Ö–∏–º–∏—è', '–∫–ª–∏–Ω–∏–Ω–≥'] },
  { key: 'laundry', emoji: 'üëî', names: ['—Å—Ç–∏—Ä–∫–∞', '—Ö–∏–º—á–∏—Å—Ç–∫–∞', '–ø—Ä–∞—á–µ—á–Ω–∞—è', '–æ–¥–µ–∂–¥–∞', '—á–∏—Å—Ç–∫–∞'] },
  { key: 'baby', emoji: 'üë∂', names: ['—Ä–µ–±–µ–Ω–æ–∫', '–¥–µ—Ç–∏', '–º–∞–ª—ã—à', '–¥–µ—Ç—Å–∫–∏–µ', '–∏–≥—Ä—É—à–∫–∏'] },
  { key: 'school', emoji: 'üéì', names: ['—à–∫–æ–ª–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–µ–±–∞', '–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '—É—á–µ–±–Ω–∏–∫–∏'] },
  { key: 'work', emoji: 'üíº', names: ['—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å', '–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞', '–¥–µ–ª–æ–≤—ã–µ', '–∫–∞—Ä—å–µ—Ä–∞'] }
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
const getRandomColor = () => {
  return availableColors[Math.floor(Math.random() * availableColors.length)]
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const defaultGroups = [
  '–û—Å–Ω–æ–≤–Ω—ã–µ',
  '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
  '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏',
  '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
  '–ó–¥–æ—Ä–æ–≤—å–µ',
  '–î–æ–º –∏ –±—ã—Ç',
  '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
  '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
]

export function CategoryForm({ category, onSuccess, onCancel }: CategoryFormProps) {
  const [formData, setFormData] = useState<CreateCategoryData>({
    name: category?.name || '',
    color: category?.color || getRandomColor(),
    icon: category?.icon || 'shopping-bag',
    group_name: category?.group_name || '–û—Å–Ω–æ–≤–Ω—ã–µ'
  })
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [iconSearchTerm, setIconSearchTerm] = useState('')
  const [groupSearchTerm, setGroupSearchTerm] = useState('')
  const [showGroupDropdown, setShowGroupDropdown] = useState(false)
  const [availableGroups, setAvailableGroups] = useState<string[]>(defaultGroups)
  const nameInputRef = useRef<HTMLInputElement>(null)
  const groupInputRef = useRef<HTMLInputElement>(null)

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
  useEffect(() => {
    if (nameInputRef.current) {
      nameInputRef.current.focus()
    }
  }, [])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
  useEffect(() => {
    const loadGroups = async () => {
      try {
        const result = await getCategoryGroups()
        if ('success' in result && result.data) {
          const groupNames = result.data.map(group => group.name)
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏
          const allGroups = [...new Set([...defaultGroups, ...groupNames])]
          setAvailableGroups(allGroups)
        } else {
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
          setAvailableGroups(defaultGroups)
        }
      } catch (error) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        setAvailableGroups(defaultGroups)
      }
    }
    
    loadGroups()
  }, [])

  // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (groupInputRef.current && !groupInputRef.current.contains(event.target as Node)) {
        setShowGroupDropdown(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredIcons = availableIcons.filter(icon => {
    if (iconSearchTerm === '') return true
    
    const searchLower = iconSearchTerm.toLowerCase()
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    const matchesNames = icon.names.some(name => 
      name.toLowerCase().includes(searchLower)
    )
    
    // –ü–æ–∏—Å–∫ –ø–æ —ç–º–æ–¥–∑–∏
    const matchesEmoji = icon.emoji.includes(iconSearchTerm)
    
    // –ü–æ–∏—Å–∫ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∫–ª—é—á—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const matchesKey = icon.key.toLowerCase().includes(searchLower)
    
    return matchesNames || matchesEmoji || matchesKey
  })

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredGroups = availableGroups.filter(group =>
    group.toLowerCase().includes(groupSearchTerm.toLowerCase())
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
  const handleGroupSelect = (group: string) => {
    handleChange('group_name', group)
    setGroupSearchTerm('')
    setShowGroupDropdown(false)
  }



  const toast = useToast()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setErrors({})
    setIsLoading(true)

    try {
      const result = category 
        ? await updateCategory(category.id, formData)
        : await createCategory(formData)

      if (result.error) {
        toast.error(result.error)
      } else {
        toast.success(category ? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞')
        onSuccess(result.data)
      }
    } catch (error) {
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (field: keyof CreateCategoryData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
      <Input
        ref={nameInputRef}
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        value={formData.name}
        onChange={(e) => handleChange('name', e.target.value)}
        error={errors.name}
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥—É–∫—Ç—ã, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
        required
      />

      {/* –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –ì—Ä—É–ø–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        </label>
        <div className="relative" ref={groupInputRef}>
          <Input
            value={showGroupDropdown ? groupSearchTerm : formData.group_name}
            onChange={(e) => {
              setGroupSearchTerm(e.target.value)
              setShowGroupDropdown(true)
            }}
            onFocus={() => {
              setGroupSearchTerm('')
              setShowGroupDropdown(true)
            }}
            placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã..."
            className="w-full"
          />
          
          {showGroupDropdown && (
            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-48 overflow-y-auto">
              {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã */}
              {filteredGroups.map((group) => (
                <button
                  key={group}
                  type="button"
                  onClick={() => handleGroupSelect(group)}
                  className="w-full px-3 py-2 text-left hover:bg-gray-100 focus:bg-gray-100 focus:outline-none"
                >
                  {group}
                </button>
              ))}
              
              {/* –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã */}
              {groupSearchTerm.trim() && !filteredGroups.some(group => group.toLowerCase() === groupSearchTerm.toLowerCase()) && (
                <button
                  type="button"
                  onClick={() => handleGroupSelect(groupSearchTerm.trim())}
                  className="w-full px-3 py-2 text-left hover:bg-indigo-50 focus:bg-indigo-50 focus:outline-none text-indigo-600 border-t border-gray-100"
                >
                  <div className="flex items-center">
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É &quot;{groupSearchTerm.trim()}&quot;
                  </div>
                </button>
              )}
              
              {filteredGroups.length === 0 && !groupSearchTerm.trim() && (
                <div className="px-3 py-2 text-gray-500 text-sm">
                  –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏ */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        </label>
        
        {/* –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–æ–∫ */}
        <Input
          value={iconSearchTerm}
          onChange={(e) => setIconSearchTerm(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏..."
          className="mb-3"
        />
        
        <div className="grid grid-cols-8 gap-2 max-h-48 overflow-y-auto">
          {filteredIcons.map((icon) => (
            <button
              key={icon.key}
              type="button"
              onClick={() => handleChange('icon', icon.key)}
              className={`
                p-2 rounded-lg border-2 transition-all duration-200 hover:scale-105
                ${formData.icon === icon.key 
                  ? 'border-indigo-500 bg-indigo-50' 
                  : 'border-gray-200 hover:border-gray-300'
                }
              `}
              title={icon.names[0]}
            >
              <div className="text-xl">{icon.emoji}</div>
            </button>
          ))}
        </div>
        
        {filteredIcons.length === 0 && (
          <div className="text-center py-4 text-gray-500">
            –ò–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        )}
      </div>

      {/* –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ */}
      <div>
        <div className="flex items-center justify-between mb-3">
          <label className="block text-sm font-medium text-gray-700">
            –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </label>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => handleChange('color', getRandomColor())}
          >
            üé≤ –°–ª—É—á–∞–π–Ω—ã–π
          </Button>
        </div>
        <div className="flex flex-wrap gap-2">
          {availableColors.map((color) => (
            <button
              key={color}
              type="button"
              onClick={() => handleChange('color', color)}
              className={`
                w-8 h-8 rounded-full border-2 transition-all duration-200 hover:scale-110
                ${formData.color === color 
                  ? 'border-gray-600 shadow-lg ring-2 ring-gray-300' 
                  : 'border-gray-200 hover:border-gray-400'
                }
              `}
              style={{ backgroundColor: color }}
            />
          ))}
        </div>
      </div>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        </label>
        <div className="flex items-center space-x-3">
          <div 
            className="w-12 h-12 rounded-full flex items-center justify-center text-xl"
            style={{ backgroundColor: formData.color + '20' }}
          >
            <span>
              {availableIcons.find(icon => icon.key === formData.icon)?.emoji || 'üì¶'}
            </span>
          </div>
          <div>
            <div className="font-medium text-gray-900">
              {formData.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
            </div>
            <div 
              className="w-16 h-1 rounded-full mt-1"
              style={{ backgroundColor: formData.color }}
            />
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex justify-end space-x-3 pt-4 border-t">
        <Button
          type="button"
          variant="ghost"
          onClick={onCancel}
          disabled={isLoading}
        >
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          type="submit"
          variant="primary"
          isLoading={isLoading}
        >
          {category ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
        </Button>
      </div>
    </form>
  )
}