'use client'

import { useState } from 'react'
import { Modal } from '@/components/ui/Modal'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card } from '@/components/ui/Card'
import { useToast } from '@/hooks/useToast'
import { createKeyword, deleteKeyword } from '@/lib/actions/keywords'
import type { Category, CategoryKeyword } from '@/types'

interface CategoryKeywordsModalProps {
  isOpen: boolean
  onClose: () => void
  category: Category
  keywords: CategoryKeyword[]
  onKeywordChange: () => void
}

export function CategoryKeywordsModal({ isOpen, onClose, category, keywords, onKeywordChange }: CategoryKeywordsModalProps) {
  const [newKeyword, setNewKeyword] = useState('')
  const [isAdding, setIsAdding] = useState(false)
  const { showToast } = useToast()

  const handleAddKeyword = async () => {
    if (!newKeyword.trim()) {
      showToast('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', 'error')
      return
    }

    setIsAdding(true)
    try {
      const result = await createKeyword({
        keyword: newKeyword.trim().toLowerCase(),
        category_id: category.id
      })

      if (result.success) {
        showToast('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success')
        setNewKeyword('')
        onKeywordChange()
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞', 'error')
      }
    } catch (error) {
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏', 'error')
    } finally {
      setIsAdding(false)
    }
  }

  const handleDeleteKeyword = async (keywordId: string) => {
    try {
      const result = await deleteKeyword(keywordId)
      if (result.success) {
        showToast('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ', 'success')
        onKeywordChange()
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞', 'error')
      }
    } catch (error) {
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', 'error')
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !isAdding) {
      handleAddKeyword()
    }
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={`–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${category.name}`}>
      <div className="space-y-4">
        {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ */}
        <div className="flex gap-2">
          <Input
            value={newKeyword}
            onChange={(e) => setNewKeyword(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ..."
            disabled={isAdding}
            className="flex-1"
          />
          <Button
            onClick={handleAddKeyword}
            disabled={isAdding || !newKeyword.trim()}
            size="sm"
          >
            {isAdding ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </Button>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ */}
        <div className="max-h-60 overflow-y-auto">
          {keywords.length === 0 ? (
            <Card className="p-4 text-center">
              <p className="text-gray-600 text-sm">
                –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </p>
              <p className="text-gray-500 text-xs mt-1">
                –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
              </p>
            </Card>
          ) : (
            <div className="space-y-2">
              {keywords.map((keyword) => (
                <div
                  key={keyword.id}
                  className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-sm font-medium text-gray-900">
                      {keyword.keyword}
                    </span>
                  </div>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => handleDeleteKeyword(keyword.id)}
                    className="text-gray-500 hover:text-red-600 p-1"
                    title="–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </Button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <p className="text-sm text-blue-800">
            üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. 
            –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ &quot;–ü—Ä–æ–¥—É–∫—Ç—ã&quot;: –º–∞–≥–∞–∑–∏–Ω, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç, –ø—Ä–æ–¥—É–∫—Ç—ã, –µ–¥–∞.
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-end pt-4 border-t">
          <Button variant="outline" onClick={onClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </div>
      </div>
    </Modal>
  )
}
